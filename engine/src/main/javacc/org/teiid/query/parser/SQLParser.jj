options {
	STATIC = false;
	ERROR_REPORTING = true;
	JAVA_UNICODE_ESCAPE = true;
	UNICODE_INPUT = false;
	IGNORE_CASE = true;
	DEBUG_PARSER = false;
	DEBUG_LOOKAHEAD = false;
    DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(SQLParser)

package org.teiid.query.parser;

import java.math.BigInteger;
import java.util.*;
import org.teiid.core.types.*;
import org.teiid.query.QueryPlugin;
import org.teiid.query.sql.LanguageObject;
import org.teiid.query.sql.lang.*;
import org.teiid.query.sql.proc.*;
import org.teiid.query.sql.symbol.*;
import org.teiid.metadata.*;
import org.teiid.metadata.BaseColumn.NullType;
import org.teiid.language.Like.MatchMode;
import org.teiid.translator.*;

/** 
 * <p>The SQLParser is a JavaCC-generated parser that reads a SQL string and produces a 
 * Query object.  The SQLParser.java file is generated by JavaCC from the SQLParser.jj
 * file.  <B>WARNING:</B> DO NOT MODIFY the SQLParser.java file as it will be 
 * regenerated from the .jj file and your changes will be lost!</p>
 */
@SuppressWarnings({"nls", "unused"})
public class SQLParser extends SQLParserUtil {

} // end class

PARSER_END(SQLParser)

TOKEN_MGR_DECLS : 
{
    int commentNestingDepth; 
} 

SKIP :
{
	" " | "\t" | "\n" | "\r"
}

MORE :
{
  "/*" { commentNestingDepth = 1 ; } : IN_MULTI_LINE_COMMENT
}

<IN_MULTI_LINE_COMMENT>
MORE : 
{  
  "/*" { commentNestingDepth += 1 ; } 
} 

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN : 
{  
  "*/" { 
    commentNestingDepth -= 1;
    SwitchTo( commentNestingDepth==0 ? DEFAULT : IN_MULTI_LINE_COMMENT ) ; 
  }
} 

<IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

TOKEN: /* Data types */
{
	<STRING: "string">
|   <VARBINARY: "varbinary">
|   <VARCHAR: "varchar">
|	<BOOLEAN: "boolean">
|	<BYTE: "byte">
|   <TINYINT: "tinyint">
|	<SHORT: "short">
|   <SMALLINT: "smallint">
|	<CHAR: "char">
|	<INTEGER: "integer">
|	<LONG: "long">
|   <BIGINT: "bigint">
|	<BIGINTEGER: "biginteger">
|	<FLOAT: "float">
|   <REAL: "real"> 
|	<DOUBLE: "double">
|	<BIGDECIMAL: "bigdecimal">
|   <DECIMAL: "decimal">
|	<DATE: "date">
|	<TIME: "time">
|	<TIMESTAMP: "timestamp">
|	<OBJECT: "object">
|	<BLOB: "blob">
|	<CLOB: "clob">
|	<XML: "xml">
}


TOKEN: /* Functions with special syntax */
{
	<CAST: "cast">
|	<CONVERT: "convert">
}

TOKEN : /* Reserved words */
{
    <ADD: "add">
|   <ALL: "all">
|   <ALTER: "alter">
|   <AND: "and">
|   <ANY: "any">
|   <ARRAY: "array">
|   <ARRAY_AGG: "array_agg">
|   <AS: "as">
|   <ASC: "asc">
|   <ATOMIC: "atomic">
|   <AUTORIZATION: "authorization">
|   <BEGIN: "begin">
|   <BETWEEN: "between">
|   <BINARY: "binary">
|   <BOTH: "both">
|   <BREAK: "break">
|   <BY: "by">
|   <CALL: "call">
|   <CALLED: "called">
|   <CASCADED: "cascaded">
|   <CASE: "case">
|   <CHARACTER: "character">
|   <CHECK: "check">
|   <CLOSE: "close">
|   <COLLATE: "collate">
|   <COLUMN: "column">
|   <COMMIT: "commit">
|   <CONNECT: "connect">
|   <CONSTRAINT: "constraint">
|   <CONTINUE: "continue">
|   <CORRESPONDING: "corresponding">
|   <CURRENT_DATE: "current_date">
|   <CURRENT_TIME: "current_time">
|   <CURRENT_TIMESTAMP: "current_timestamp">
|   <CURRENT_USER: "current_user">
|   <CREATE: "create">
|   <CRITERIA: "criteria">
|   <CROSS: "cross">
|   <CURSOR: "cursor">
|   <DAY: "day">
|   <DEALLOCATE: "deallocate">
|   <DEFAULT_KEYWORD: "default">
|   <DECLARE: "declare">
|   <DELETE: "delete">
|   <DESC: "desc">
|   <DESCRIBE: "describe">
|   <DETERMINISTIC: "deterministic">
|   <DISCONNECT: "disconnect">
|   <DISTINCT: "distinct">
|   <DROP: "drop">
|	<EACH: "each">
|   <ELSE: "else">
|   <END: "end">
|   <ERROR: "error">
|   <ESCAPE: "escape">
|   <EXCEPT: "except">
|   <EXEC: "exec">
|   <EXECUTE: "execute">
|   <EXTERNAL: "external">
|   <EXISTS: "exists">
|   <FALSE: "false">
|   <FETCH: "fetch">
|   <FILTER: "filter">
|   <FOR: "for">
|   <FOREIGN: "foreign">
|   <FROM: "from">
|   <FULL: "full">
|   <FUNCTION: "function">
|   <GET: "get">
|   <GLOBAL: "global">
|   <GRANT: "grant">
|   <GROUP: "group">
|   <HAS: "has">
|   <HAVING: "having">
|   <HOLD: "hold">
|   <HOUR: "hour">
|   <IF: "if">
|   <IDENTITY: "identity">
|   <IMMEDIATE: "immediate">
|   <IN: "in">
|   <INDICATOR: "indicator">
|   <INNER: "inner">
|   <INPUT: "input">
|   <INOUT: "inout">
|   <INSENSITIVE: "insensitive">
|   <INSERT: "insert">
|   <INTERSECT: "intersect">
|   <INTERVAL: "interval">
|   <INTO: "into">
|   <IS: "is">
|   <ISOLATION: "isolation">
|   <JOIN: "join">
|   <LEFT: "left">
|   <LANGUAGE: "language">
|   <LARGE: "large">
|   <LEADING: "leading">
|   <LEAVE: "leave">
|   <LIKE: "like">
|   <LIKE_REGEX: "like_regex">
|   <LIMIT: "limit">
|   <LOCAL: "local">
|   <LOOP: "loop">
|   <MAKEDEP: "makedep">
|   <MAKENOTDEP: "makenotdep">
|   <MATCH: "match">
|   <MERGE: "merge">
|   <METHOD: "method">
|   <MINUTE: "minute">
|   <MODIFIES: "modifies">
|   <MODULE: "module">
|   <MONTH: "month">
|   <NATURAL: "natural">
|   <NEW: "new">
|	<NOCACHE: "nocache">
|   <NO: "no">
|   <NONE: "none">
|   <NOT: "not">
|   <NULL: "null">
|   <OF: "of">
|   <OFFSET: "offset">
|   <OLD: "old">
|   <ON: "on">
|   <ONLY: "only">
|   <OPEN: "open">
|   <OPTION: "option">
|   <OPTIONS: "options">
|   <OR: "or">
|   <ORDER: "order">
|   <OUT: "out">
|   <OUTER: "outer">
|   <OUTPUT: "output">
|   <OVER: "over">
|   <OVERLAPS: "OVERLAPS">
|   <PARAMETER: "parameter">
|   <PARTITION: "partition">
|   <PRECISION: "precision">
|   <PREPARE: "prepare">
|   <PRIMARY: "primary">
|   <PROCEDURE: "procedure">
|   <RANGE: "range">
|   <READS: "reads">
|   <RECURSIVE: "recursive">
|   <REFERENCES: "REFERENCES">
|   <REFERENCING: "REFERENCING">
|   <RETURN: "return">
|   <RETURNS: "returns">
|   <REVOKE: "REVOKE">
|   <RIGHT: "right">
|   <ROLLBACK: "ROLLBACK">
|   <ROLLUP: "ROLLUP">
|   <ROW: "row">
|   <ROWS: "rows">
|   <SAVEPOINT: "savepoint">
|   <SCROLL: "scroll">
|   <SEARCH: "search">
|   <SECOND: "second">
|   <SELECT: "select">
|   <SENSITIVE: "sensitive">
|   <SESSION_USER: "session_user">
|   <SET: "set">
|   <SIMILAR: "similar">
|   <SPECIFIC: "specific">
|   <SOME: "some">
|   <SQL: "sql">
|   <SQLEXCEPTION: "sqlexception">
|   <SQLSTATE: "sqlstate">
|   <SQLWARNING: "sqlwarning">
|   <START: "start">
|   <STATIC: "static">
|   <SYSTEM: "system">
|   <SYSTEM_USER: "system_user">
|   <TABLE: "table">
|   <TEMPORARY: "temporary">
|   <THEN: "then">
|   <TIMEZONE_HOUR: "timezone_hour">
|   <TIMEZONE_MINUTE: "timezone_minute">
|   <TO: "to">
|   <TRAILING: "trailing">
|   <TRANSLATE: "translate">
|   <TRIGGER: "trigger">
|   <TRUE: "true">
|   <UNION: "union">
|   <UNIQUE: "unique">
|   <UNKNOWN: "unknown">
|   <USER: "user">
|   <UPDATE: "update">
|   <USING: "using">
|   <VALUE: "value">
|   <VALUES: "values">
|   <VIRTUAL: "virtual">
|   <WHEN: "when">
|   <WHENEVER: "whenever">
|   <WHERE: "where">
|   <WITH: "with">
|   <WHILE: "while">
|   <WINDOW: "window">
|   <WITHIN: "within">
|   <WITHOUT: "without">
|   <YEAR: "year">

|   <ALLOCATE: "allocate">
|   <ARE: "are">
|   <ASENSITIVE: "asensitive">
|   <ASYMETRIC: "asymetric">
|   <CYCLE: "cycle">
|   <DEC: "dec">
|   <DEREF: "deref">
|   <DYNAMIC: "dynamic">
|   <ELEMENT: "element">
|   <FREE: "free">
|   <INT: "int">
|   <LATERAL: "lateral">
|   <LOCALTIME: "localtime">
|   <LOCALTIMESTAMP: "localtimestamp">
|   <MEMBER: "member">
|   <MULTISET: "multiset">
|   <NATIONAL: "national">
|   <NCHAR: "nchar">
|   <NCLOB: "nclob">
|   <NUMERIC: "numeric">
|   <RELEASE: "release">
|   <SPECIFICTYPE: "specifictype">
|   <SYMETRIC: "symetric">
|   <SUBMULTILIST: "submultilist">
|   <TRANSLATION: "translation">
|   <TREAT: "treat">
|   <VARYING: "varying">
}

TOKEN : /* SQL/XML Reserved words */
{
    <XMLAGG: "xmlagg">
|   <XMLATTRIBUTES: "xmlattributes">
|   <XMLBINARY: "xmlbinary">
|   <XMLCAST: "xmlcast">
|   <XMLCONCAT: "xmlconcat">
|   <XMLCOMMENT: "xmlcomment">
|   <XMLDOCUMENT: "xmldocument">
|   <XMLELEMENT: "xmlelement">
|   <XMLEXISTS: "xmlexists">
|   <XMLFOREST: "xmlforest">
|   <XMLITERATE: "xmliterate">
|   <XMLNAMESPACES: "xmlnamespaces">
|   <XMLPARSE: "xmlparse">
|   <XMLPI: "xmlpi">
|   <XMLQUERY: "xmlquery">
|   <XMLSERIALIZE: "xmlserialize">
|   <XMLTABLE: "xmltable">
|   <XMLTEXT: "xmltext">
|   <XMLVALIDATE: "xmlvalidate">
}

TOKEN : /* SQL/MED Reserved words */
{
    <DATALINK: "datalink">
|   <DLNEWCOPY: "dlnewcopy">
|   <DLPREVIOUSCOPY: "dlpreviouscopy">
|   <DLURLCOMPLETE: "dlurlcomplete">
|   <DLURLCOMPLETEWRITE: "dlurlcompletewrite">
|   <DLURLCOMPLETEONLY: "dlurlcompleteonly">
|   <DLURLPATH: "dlurlpath">
|   <DLURLPATHWRITE: "dlurlpathwrite">
|   <DLURLPATHONLY: "dlurlpathonly">
|   <DLURLSCHEME: "dlurlscheme">
|   <DLURLSERVER: "dlurlserver">
|   <DLVALUE: "dlvalue">
|   <IMPORT: "import">
}

TOKEN : /* User variables and literals */
{
    < ALL_IN_GROUP: <ID> <PERIOD> <STAR> >

|   < ID: <QUOTED_ID> (<PERIOD> <QUOTED_ID>)* >
|	< #QUOTED_ID: <ID_PART> | ("\"" (("\"\"") | ~["\""] )+ "\"") >           
|   < #ID_PART: (("@" | "#" | <LETTER>) (<LETTER> | "_" | <DIGIT>)*) >               

| 	< DATETYPE: "{" "d" >
| 	< TIMETYPE: "{" "t" >
| 	< TIMESTAMPTYPE: "{" "ts" >
| 	< BOOLEANTYPE: "{" "b" >
|   < POS_REF: ["$"] (<DIGIT>)+ >
|	< INTEGERVAL: (<MINUS>)?(<DIGIT>)+ >
|   < DECIMALVAL: (<MINUS>)? (<DIGIT>)* <PERIOD> (<DIGIT>)+ >
|   < FLOATVAL: (<MINUS>)? <DIGIT> <PERIOD> (<DIGIT>)+ 
				["e", "E"] (["+","-"])? (<DIGIT>)+  >
|   < STRINGVAL: (("N"|"E")? "'" ( ("''") | ~["'"] )* "'") >
|	< #LETTER: (["a"-"z","A"-"Z"] | ["\u0153"-"\ufffd"]) >
|	< #DIGIT: ["0"-"9"] >
|   < BINARYSTRINGVAL: ("X"|"x" "'" ( <HEXIT><HEXIT> )+ "'") >
|	< #HEXIT: (["a"-"f","A"-"F"] | <DIGIT> ) >
}

TOKEN : /* Punctuation */
{
	<COMMA: ",">
|	<PERIOD: ".">
|	<LPAREN: "(">
|	<RPAREN: ")">
|   <LBRACE: "{">
|   <RBRACE: "}">
|   <LSBRACE: "[">
|   <RSBRACE: "]">
|	<EQ: "=">
|	<NE: "<>">
|	<NE2: "!=">
|	<LT: "<">
|	<LE: "<=">
|	<GT: ">">
|	<GE: ">=">
|	<STAR: "*">
|	<SLASH: "/">
|	<PLUS: "+">
|	<MINUS: "-">
|   <QMARK: "?">
|   <DOLLAR: "$">
|   <SEMICOLON: ";">
|   <COLON: ":">
|	<CONCAT_OP: "||">
}


//----------------------------------------------------
//----------------------------------------------------

String stringVal() :
{
	Token t = null;	
}
{
  	(t = <STRINGVAL>)
  	{
  		return normalizeStringLiteral(t.image);
  	}
}

String id() :
{
	Token t = null;
}
{
  	(t = <ID>)
  	{
  		return normalizeId(t.image);
  	}
}

/** 
 * Parse any of several command types - this is the main parser entry point. 
 * @param info instructions to parse the command
 * @return Parsed command
 * @throws ParseException if parsing failed
 */
Command command(ParseInfo info) :
{
	Command command = null;
}
{
	 (LOOKAHEAD(2) command = createProcedure(info) |
	  command = userCommand(info) |
	  command = callableStatement(info)
	)
	[<SEMICOLON>]
	<EOF>
	{
		return command;
	}
}

Command designerCommand(ParseInfo info) :
{
	Command command = null;
}
{
	(LOOKAHEAD (2) command = createProcedure(info) |
	 command = forEachRowTriggerAction(info) |
	 command = userCommand(info)	  
	)
	[<SEMICOLON>]
	<EOF>
	{
		return command;
	}
}

Command createTrigger(ParseInfo info) :
{
  	String target = null;
  	TriggerAction triggerAction = null;
  	Token event = null;
  	
}
{
	<CREATE> <TRIGGER> <ON> target = id() nonReserved("INSTEAD") <OF> 
	(event = <INSERT> | event = <UPDATE> | event = <DELETE>) 
	<AS> triggerAction = forEachRowTriggerAction(info)
	{
		AlterTrigger alterTrigger = new AlterTrigger();
		alterTrigger.setTarget(new GroupSymbol(target));
		alterTrigger.setDefinition(triggerAction);
		alterTrigger.setEvent(Table.TriggerEvent.valueOf(event.image.toUpperCase()));
		alterTrigger.setCreate(true);
		return alterTrigger;				
	}
}

Command alter(ParseInfo info) :
{
  	String target = null;
  	QueryCommand command = null;
  	Statement stmt = null;
  	TriggerAction triggerAction = null;
  	Token comment = null;
  	Token event = null;
  	String enabled = null;
}
{
	<ALTER>
	(
	 	(nonReserved("VIEW") target = id() <AS> { comment = getToken(1).specialToken; } command = queryExpression(info)) 
	 	{
	 	    if (comment != null) {
		 	    command.setCacheHint(getQueryCacheOption(comment.image));
	 	    }
	 		AlterView alterView = new AlterView();
	 		alterView.setTarget(new GroupSymbol(target));
	 		alterView.setDefinition(command);
	 		return alterView;	
	 	}
		| (<PROCEDURE> target = id() <AS> { comment = getToken(1).specialToken; } stmt = statement(info)) 
		{
			CreateProcedureCommand cup = new CreateProcedureCommand(asBlock(stmt));
			if (comment != null) {
		 	    cup.setCacheHint(getQueryCacheOption(comment.image));
	 	    }
			AlterProcedure alterProc = new AlterProcedure();
			alterProc.setTarget(new GroupSymbol(target));
			alterProc.setDefinition(cup);
			return alterProc;
		}
		| (<TRIGGER> <ON> target = id() nonReserved("INSTEAD") <OF> 
		  (event = <INSERT> | event = <UPDATE> | event = <DELETE>) 
		  ((<AS> triggerAction = forEachRowTriggerAction(info))
		  |enabled = nonReserved("ENABLED","DISABLED")))
		{
			AlterTrigger alterTrigger = new AlterTrigger();
			alterTrigger.setTarget(new GroupSymbol(target));
			alterTrigger.setDefinition(triggerAction);
			alterTrigger.setEvent(Table.TriggerEvent.valueOf(event.image.toUpperCase()));
			if (enabled != null) {
				alterTrigger.setEnabled(enabled.equalsIgnoreCase("ENABLED"));
			}
			return alterTrigger;				
		}
	)
}

TriggerAction forEachRowTriggerAction(ParseInfo info) :
{
	Block b = new Block();
	b.setAtomic(true);
	Statement stmt = null;
}
{
	<FOR> <EACH> <ROW>
	(
	 LOOKAHEAD(1) (<BEGIN> [<ATOMIC>]
      (
	    stmt = statement(info)
	    {          
    	    b.addStatement(stmt);            	                	    
	    }
      )*
      <END> 
     )
     |
     stmt = statement(info)
     {
       b = asBlock(stmt);
       b.setAtomic(true);
     }
    ) 
	{
		return new TriggerAction(b);
	}
}

Command userCommand(ParseInfo info) :
{
	Command command = null;
	SourceHint sourceHint = null;
}
{
    {int index = 1; 
     Token t = null;
     do  
       t = getToken(index++);
     while (t != null && t.kind == LPAREN);
     t = getToken(index);
     if (t != null) 
      sourceHint = getSourceHint(t); 
    }
	(command = queryExpression(info) |
	command = storedProcedure(info, new StoredProcedure()) |
	command = insert(info) |
	command = update(info) |
	command = delete(info) |
	command = dropTable(info) |
	LOOKAHEAD(2) command = createTempTable(info) |
	command = alter(info) |
	command = createTrigger(info)
	)
	{
	    if (sourceHint != null) {
	        if (command instanceof SetQuery) {
	        	((SetQuery)command).getProjectedQuery().setSourceHint(sourceHint);
	        } else {
	    		command.setSourceHint(sourceHint);
	    	}
	    }
		return command;
	}
}

/** 
 * Parse drop table command. 
 * @param info instructions to parse the command
 * @return Parsed command
 * @throws ParseException if parsing failed
 */
Command dropTable(ParseInfo info) :
{
	Drop drop = new Drop();
	String table = null;
}
{
	<DROP> <TABLE> 
	table = id()
	{
		drop.setTable(new GroupSymbol(table));
		return drop;
	}
}
	
/** 
 * Parse create temp table command. 
 * @param info instructions to parse the command
 * @return Parsed command
 * @throws ParseException if parsing failed
 */
Command createTempTable(ParseInfo info) :
{
	Create create = new Create();
	String table = null;
	String pkId = null;
	Column col = null;
}
{
	<CREATE> <LOCAL> <TEMPORARY> <TABLE> 
	table = id()
	<LPAREN>
	{
		create.setTable(new GroupSymbol(table));
	}
    col = tableElement(info)
    {
      create.getColumns().add(col);
    }
    (LOOKAHEAD(2) <COMMA>
      col = tableElement(info)
      {
        create.getColumns().add(col);
      }
    )*	
	[<COMMA> <PRIMARY> nonReserved("KEY") <LPAREN>
	  pkId = id()
	  {
	    create.getPrimaryKey().add(new ElementSymbol(validateElementName(pkId)));
	  }
	  (<COMMA> pkId = id()
	   {
	     create.getPrimaryKey().add(new ElementSymbol(validateElementName(pkId)));
	   }
	  )*
	 <RPAREN>	
	]
	<RPAREN>
	{
		return create;
	}
}

Column tableElement(ParseInfo info) :
{
	String element = null;
	ParsedDataType type = null;
	boolean autoIncrement = false;
	boolean notNull = false;
}
{
	 element = id()
	 (
	  type = parseDataType()
	  |
	  nonReserved("SERIAL")
	  {
	    type = new ParsedDataType("INTEGER");
	    autoIncrement = true;
	    notNull = true;
	  }
	 )
	 [<NOT> <NULL> { notNull = true; }]
	 {
	    Column c = new Column();
	    c.setName(validateElementName(element));
	    c.setRuntimeType(type.type);
	    c.setAutoIncremented(autoIncrement);
	    c.setNullType(notNull?NullType.No_Nulls:NullType.Nullable);
	    return c;
	 }
}

/**
 * Parse error statement
 * @throws ParseException if parsing failed
 */
RaiseErrorStatement errorStatement(ParseInfo info) :
{
    Expression errMsg = null;           
}
{ 
    <ERROR>
    errMsg = expression(info)           
        
    {
        RaiseErrorStatement errStmt = new RaiseErrorStatement(errMsg);       
        return errStmt; 
    }
}

/**
 * Parse statement
 * @throws ParseException if parsing failed
 */
Statement statement(ParseInfo info) :
{
    Statement stmt = null;
    String label = null;
}
{
    (
	 LOOKAHEAD(2) ([label = id() <COLON>] 
	  (
	   stmt = loopStatement(info) |
	   stmt = whileStatement(info) |
	   stmt = compoundStatement(info)
	  )
	  {
	  	((Statement.Labeled)stmt).setLabel(label);
	  }
	 )
	 |
	 (
      stmt = ifStatement(info) |
      stmt = delimitedStatement(info)
	 )
	)
    
    {
        return stmt;
    }
}

Statement delimitedStatement(ParseInfo info) :
{
    Statement stmt = null;
}           
{
     (LOOKAHEAD(3) stmt = assignStatement(info) |
	  stmt = sqlStatement(info) |
      stmt = errorStatement(info) |
	  stmt = declareStatement(info) |
	  stmt = branchingStatement(info)
	 )
	 <SEMICOLON>
	 {
	     return stmt;
	 }
}

Block compoundStatement(ParseInfo info) :
{
    Statement stmt = null;  
    Block block = new Block();
    Boolean atomic = null;
}
{   
    <BEGIN> [[<NOT> {atomic = Boolean.FALSE;}] <ATOMIC> {if (atomic == null) {atomic = Boolean.TRUE;}}]
    (
      stmt = statement(info)
      {          
	    block.addStatement(stmt);            	                	    
	  }
 	)*
    <END>
    {
        if (atomic != null) {
        	block.setAtomic(atomic);
        }
        return block;
    }
}        

/**
 * Parse break statement 
 * @throws ParseException if parsing failed
 */
BranchingStatement branchingStatement(ParseInfo info) :
{
    BranchingStatement breakStmt = new BranchingStatement();
    Token mode = null;
    String label = null;
}
{
 	(
 	 (
 	  (mode = <BREAK> | mode = <CONTINUE>) [label = id()] 
 	 )
 	 | 
 	 (mode = <LEAVE> label = id())
 	)
 	{
 	    breakStmt.setMode(BranchingStatement.BranchingMode.valueOf(mode.image.toUpperCase()));
 	    breakStmt.setLabel(label);
 		return breakStmt;
 	}
} 	

/**
 * Parse while statement 
 * @throws ParseException if parsing failed
 */
WhileStatement whileStatement(ParseInfo info) :
{
    WhileStatement whileStmt = null;    
    Criteria criteria = null;
    Statement stmt = null;
}
{
    <WHILE>
    <LPAREN>  
    criteria = criteria(info)
    <RPAREN>
    stmt = statement(info)
    {
        whileStmt = new WhileStatement(criteria, asBlock(stmt));   
        return whileStmt;
    }    
}    

/**
 * Parse loop statement 
 * @throws ParseException if parsing failed
 */
LoopStatement loopStatement(ParseInfo info) :
{
    LoopStatement loopStmt = null;    
    String cursor = null;
    QueryCommand query = null;
    Statement stmt = null;
}
{
    <LOOP>
    <ON>
    <LPAREN>  
    query = queryExpression(info)
    <RPAREN>
    <AS>
    cursor = id()
    stmt = statement(info)
    {
        loopStmt = new LoopStatement(asBlock(stmt), query, cursor);   
        return loopStmt;
    }    
}   

/**
 * Parse if statement 
 * @throws ParseException if parsing failed
 */
IfStatement ifStatement(ParseInfo info) :
{
    IfStatement ifStmt = null;    
    Criteria criteria = null;
    Statement ifStatement = null;
    Statement elseStatement = null;
}
{
    <IF>
    <LPAREN>  
    criteria = criteria(info)
    <RPAREN>
    ifStatement = statement(info)
    //else blocks will be associated with the closest if block
    [LOOKAHEAD(1)<ELSE> elseStatement = statement(info)]
    {
        ifStmt = new IfStatement(criteria, asBlock(ifStatement));
        ifStmt.setElseBlock(asBlock(elseStatement));
        return ifStmt;
    }    
}    
            
/**
 * Parse declare statement
 * @throws ParseException if parsing failed
 */
DeclareStatement declareStatement(ParseInfo info) :
{
    DeclareStatement declStmt = null;
    String var = null;    
    Constant type = null;  
    ElementSymbol variableID = null;
    LanguageObject value = null;
}
{
    <DECLARE>
    type = dataType()
    var = id()
    {
        variableID = new ElementSymbol(var);
    }
    [(nonReserved(":=")|<EQ>)
     value = assignStatementOperand(info)
    ]
    
    {
        if (value instanceof Expression) {
    		return new DeclareStatement(variableID, (String)type.getValue(), (Expression)value);
    	}
    	if (value instanceof QueryCommand) {
    		return new DeclareStatement(variableID, (String)type.getValue(), new ScalarSubquery((QueryCommand)value));
    	}
    	return new DeclareStatement(variableID, (String)type.getValue(), (Command)value);
    }           
}

/**
 * Parse assignment statement
 * @throws ParseException if parsing failed
 */
AssignmentStatement assignStatement(ParseInfo info) :
{
    LanguageObject value = null;
    String var = null;
    ElementSymbol elementID = null;
}
{
    var = id()
    {
        elementID = new ElementSymbol(var);              
    } 
    (nonReserved(":=")|<EQ>)
    value = assignStatementOperand(info)
        
    {   
    	if (value instanceof Expression) {
    		return new AssignmentStatement(elementID, (Expression)value);
    	}
    	if (value instanceof QueryCommand) {
    		return new AssignmentStatement(elementID, (QueryCommand)value);
    	}
    	return new AssignmentStatement(elementID, (Command)value);
    }    
}

/**
 * Parse operand of assignment statement, which can be nested
 * arbitrarily deeply in parentheses.
 * @throws ParseException if parsing failed
 */
LanguageObject assignStatementOperand(ParseInfo info) :
{
    LanguageObject value = null;
}
{

    (
	  LOOKAHEAD(<INSERT><INTO>) (value = insert(info)) | //deprecated
      value = update(info) | //deprecated
      value = delete(info) | //deprecated
      LOOKAHEAD(expression(info)) (value = expression(info)) |      
      value = queryExpression(info) //deprecated should be a scalar subquery
    ) 
        
    {   
        return value;
    }    
}

/**
 * Parse sql statement 
 * @throws ParseException if parsing failed
 */
CommandStatement sqlStatement(ParseInfo info) :
{
    CommandStatement cmdStmt = null;
    Command cmd = null;
    String var = null;
    ElementSymbol elementID = null;
    StoredProcedure storedProcedure = null;
}
{
    (LOOKAHEAD(2) (cmd = userCommand(info)) |
     cmd = dynamicCommand(info) |
     (
      var = id()
      {
        storedProcedure = new StoredProcedure();
        elementID = new ElementSymbol(var);
        SPParameter parameter = new SPParameter(1, SPParameter.RETURN_VALUE, "return"); //$NON-NLS-1$
        parameter.setExpression(elementID);
	    storedProcedure.setParameter(parameter);  
	    storedProcedure.setCalledWithReturn(true);            
      } 
      (nonReserved(":=")|<EQ>)
      cmd = storedProcedure(info, storedProcedure) 
     )
    )
  
    {
    	cmdStmt = new CommandStatement(cmd);
        return cmdStmt;
    }   
}
 
/**
 * Parse create update procedure command
 * @throws ParseException if parsing failed
 */
CreateProcedureCommand  createProcedure(ParseInfo info) :
{
    CreateProcedureCommand procCmd = 
        new CreateProcedureCommand();
    Statement stmt = null;  
}
{ 
    <CREATE> [<VIRTUAL>] <PROCEDURE>
    stmt = statement(info)
    {        
        procCmd.setBlock(asBlock(stmt));
        return procCmd;        
    }    
}   

CreateProcedureCommand  procedureBodyCommand(ParseInfo info) :
{
    CreateProcedureCommand procCmd = 
        new CreateProcedureCommand();
    Statement stmt = null;  
}
{ 
    [LOOKAHEAD(2) <CREATE> [<VIRTUAL>] <PROCEDURE>]
    stmt = statement(info)
    {        
        procCmd.setBlock(asBlock(stmt));
        return procCmd;        
    }    
} 

/**
 * Parse error statement
 * @throws ParseException if parsing failed
 */
DynamicCommand dynamicCommand(ParseInfo info) :
{
    Expression sql = null;           
    String groupID = null;
	GroupSymbol group = null;
	int updateCount = 0;
	Token updateToken = null;
	List<TableFunctionReference.ProjectedColumn> elements = null;
	SetClauseList using = null;
	DynamicCommand dcStmt = new DynamicCommand();
	SetClauseList setClauseList = null;
}
{ 
    (<EXECUTE>|<EXEC>) [(<STRING>|<IMMEDIATE>)]
    sql = expression(info)
    {
        dcStmt.setSql(sql);
    }
    [<AS> 
	elements = createElementsWithTypes(info)

	 [<INTO>
      groupID = id()
      {
         group = new GroupSymbol(groupID);
      }
     ]
     {
         dcStmt.setIntoGroup(group);
         List<ElementSymbol> symbols = new ArrayList(elements.size());
         for (TableFunctionReference.ProjectedColumn col : elements) {
         	symbols.add(col.getSymbol());
         }
         dcStmt.setAsColumns(symbols);
         dcStmt.setAsClauseSet(true);
     }
	]
    [<USING>
     using = setClauseList(true, info)
	 {
	     dcStmt.setUsing(using);
	 }
    ]
    [<UPDATE>
     ((updateToken = <INTEGERVAL>) 
     {
        updateCount = Integer.parseInt(updateToken.image);
     }
     |
     (<STAR>) 
     {	
        updateCount = 2;
     })
    ]
    {
        dcStmt.setUpdatingModelCount(updateCount);
        return dcStmt; 
    }
}

SetClauseList setClauseList(boolean shortName, ParseInfo info) :
{
	SetClauseList using = new SetClauseList();
	String element = null;
}
{
	element = id()
    <EQ>
    {
    	String symbolName = shortName?validateElementName(element):element;
        ElementSymbol symbol = new ElementSymbol(symbolName);
        Expression value = expression(info);
        using.addClause(symbol, value);
    }
	(<COMMA>
	 element = id()
     <EQ>
     {
	      symbolName = shortName?validateElementName(element):element;
          symbol = new ElementSymbol(symbolName);
          value = expression(info);
          using.addClause(symbol, value);
     }
	)*
	{
		return using;
	}
}

/**
 * Create elements with datatypes
 * @throws ParseException if parsing failed
 */
List<TableFunctionReference.ProjectedColumn> createElementsWithTypes(ParseInfo info) :
{
	String element = null;
	ParsedDataType type = null;
	List<TableFunctionReference.ProjectedColumn> elements = new ArrayList<TableFunctionReference.ProjectedColumn>();
}
{
	 element = id()
	 type = parseDataType()
	 {
	    TableFunctionReference.ProjectedColumn symbol = new TableFunctionReference.ProjectedColumn(validateElementName(element), type.type);
		elements.add(symbol);
	 }
	 (LOOKAHEAD(2) <COMMA>
		element = id()
		type = parseDataType()
		{
	      symbol = new TableFunctionReference.ProjectedColumn(validateElementName(element), type.type);
		  elements.add(symbol);
		}
	 )*
	 {
	 	return elements;
	 }
}

StoredProcedure callableStatement(ParseInfo info) :
{
	StoredProcedure storedProcedure = new StoredProcedure();
	storedProcedure.setCallableStatement(true);
	Token call = null;
	String procName = null;
	Option option = null;
	SPParameter parameter = null;
	int parameterIndex = 1;
}
{
	<LBRACE>
	[<QMARK> <EQ>
	 {
	   parameter = new SPParameter(parameterIndex++, SPParameter.RETURN_VALUE, "return"); //$NON-NLS-1$
	   storedProcedure.setParameter(parameter);
	   storedProcedure.setCalledWithReturn(true);
	 }
	]
	<CALL> procName = id()
	{
		storedProcedure.setProcedureName(procName);
	}
		
	//parameters
		
	[<LPAREN>
		
	 (
		  storedProcedure = executeUnnamedParams(info, storedProcedure, parameterIndex)
	 ) 
	 <RPAREN>
	]
	<RBRACE>			
	[option = option(info)
	 {
	   storedProcedure.setOption(option);
	 }
	]

	{
		return storedProcedure;
	}
}


/**
 * * Parse stored query command
 * @throws ParseException if parsing failed
 */
StoredProcedure storedProcedure(ParseInfo info, StoredProcedure storedProcedure) :
{
	String procName = null;
	Option option = null;
}
{
	(
		(<EXEC> | <EXECUTE> | <CALL>)
		procName = id()
		{
			storedProcedure.setProcedureName(procName);
		}
		
		//parameters
		<LPAREN>
		
		(
		 LOOKAHEAD(<ID> <EQ>)
		 storedProcedure = executeNamedParams(info, storedProcedure)
		 | 		
		 storedProcedure = executeUnnamedParams(info, storedProcedure, storedProcedure.getParameters().size() + 1)
		)
		
		<RPAREN>
	)
	[option = option(info)
	 {
	   storedProcedure.setOption(option);
	 }
	]
	{
		return storedProcedure;
	}
}

/**
 * <p>Parse an exec statement with unnamed parameters</p>
 * @throws ParseException if parsing failed
 */
StoredProcedure executeUnnamedParams(ParseInfo info, StoredProcedure storedProcedure, int parameterIndex) :
{
	SPParameter parameter = null;
    Expression value = null;	
}
{

	(value = expression(info)
		{
				parameter = new SPParameter(parameterIndex++, value);
				parameter.setParameterType(SPParameter.IN);
				storedProcedure.setParameter(parameter);
		}
		(	<COMMA>
			value = expression(info)
			{
					parameter = new SPParameter(parameterIndex++, value);
					parameter.setParameterType(SPParameter.IN);
					storedProcedure.setParameter(parameter);
			}
		)*
	)?
	{
		return storedProcedure;
	}
}

/**
 * <p>Parse an exec statement with named parameters</p>
 * @throws ParseException if parsing failed
 */
StoredProcedure executeNamedParams(ParseInfo info, StoredProcedure storedProcedure) :
{
	String name = null;
    Expression value = null;
	SPParameter parameter = null;
	int parameterIndex = 1;
}
{
	{
		storedProcedure.setDisplayNamedParameters(true);
	}
	(name=id()
	 <EQ> [<GT>]
	 value = expression(info)
		{
			parameter = new SPParameter(parameterIndex++, value);
			parameter.setName(name);
			parameter.setParameterType(SPParameter.IN);
			storedProcedure.setParameter(parameter);
			parameter = null;
		}
		(	<COMMA>
		 	name=id()
	 		<EQ> [<GT>]
	 		value = expression(info)
			{
				parameter = new SPParameter(parameterIndex++, value);
				parameter.setName(name);
				parameter.setParameterType(SPParameter.IN);
				storedProcedure.setParameter(parameter);
				parameter = null;
			}
		)*
	)
	{
		
		return storedProcedure;
	}
}

/**
 * Parse an INSERT command
 * @return Parsed insert statement
 * @throws ParseException if parsing failed
 */
Insert insert(ParseInfo info) :
{
	Insert insert = new Insert();
	String group = null;
	List values = null;
	List<ElementSymbol> columns = null;
	Option option = null;
	QueryCommand query = null;
}
{
	<INSERT> <INTO>
	group = id()

	[LOOKAHEAD(<LPAREN><ID>) columns = columnList(false) {
	  insert.setVariables(columns);
	}]

	(
		( <VALUES> <LPAREN>
		  values = expressionList(info)
		  <RPAREN>
		  {
		    // Store each row of values
		    insert.setValues(values);
		  }
		)
		|
		( query = queryExpression(info)
		  {
		    insert.setQueryExpression(query);
		  }
		)
	)
	
	[ option = option(info)
	  {
	    insert.setOption(option);
	  }
	]
	
	{
		// Store group
		insert.setGroup(new GroupSymbol(group) );

		return insert;
	}
}

List<ElementSymbol> columnList(boolean validate) :
{
	String element = null;
	List<ElementSymbol> symbols = new LinkedList<ElementSymbol>();
}
{
   <LPAREN>
	element = id()
	{
		if (validate) {
			element = validateElementName(element);
		}
		symbols.add(new ElementSymbol(element));
	}
	(	<COMMA>
		element = id()
		{
			if (validate) {
				element = validateElementName(element);
			}
			symbols.add(new ElementSymbol(element));
		}
	)*
	<RPAREN>
	{
		return symbols;
	}
}

/**
 * Parse row values - this is a comma separated list of values.
 * @return List of values, never null
 * @throws ParseException if parsing failed
 */
ArrayList<Expression> expressionList(ParseInfo info) :
{
	ArrayList<Expression> rowVals = new ArrayList<Expression>(4);
	Expression value = null;
}
{
	value = expression(info)
	{
        rowVals.add(value);
	}
	(	<COMMA>
	    value = expression(info)
	    {
            rowVals.add(value);
	    }
	)*
	{
		return rowVals;
	}
}

/**
 * Parse an UPDATE command
 * @return Parsed update statement
 * @throws ParseException if parsing failed
 */
Update update(ParseInfo info) :
{
	Update update = new Update();
	String group = null;
	SetClauseList setClauseList = null;
	Criteria criteria = null;
	Option option = null;
}
{
	<UPDATE>
	group = id()
	<SET>
	setClauseList = setClauseList(false, info)
	{
		update.setChangeList(setClauseList);
	}
	[ criteria = where(info) ]
	[option = option(info)
	  {
	   update.setOption(option);
	  }
	]
	{	
		// Store group
		update.setGroup(new GroupSymbol( group) );
		
		// Store optional criteria
		if(criteria != null) {
			update.setCriteria(criteria);
		}
		
		return update;
	}
}


/**
 * Parse a DELETE command
 * @return Parsed delete statement
 * @throws ParseException if parsing failed
 */
Delete delete(ParseInfo info) :
{
	String group = null;
	Criteria criteria = null;
	Delete delete = new Delete();
	Option option = null;
}
{
	<DELETE> <FROM>
	group = id()
	[criteria = where(info)]
	[option = option(info)
	  {
	   delete.setOption(option);
	  }
	]
	{
		delete.setGroup(new GroupSymbol(group));
		delete.setCriteria(criteria);
		        
        return delete; 
	}
}

QueryCommand queryExpression(ParseInfo info) :
{
	QueryCommand query = null;
	List<WithQueryCommand> withList = null;
	WithQueryCommand withQueryCommand = null;
}
{
	[<WITH> withQueryCommand = withListElement(info)
	  {
	    withList = new LinkedList<WithQueryCommand>();
	    withList.add(withQueryCommand);
	  }
	  (	<COMMA>
	    withQueryCommand = withListElement(info)
	    {
            withList.add(withQueryCommand);
	    }
	  )*
	]
	query = queryExpressionBody(info)
	{
		query.setWith(withList);
		return query;
	}
}

WithQueryCommand withListElement(ParseInfo info) :
{
   String name = null;
   List<ElementSymbol> columns = null;
   QueryCommand queryExpression = null;
}
{
	name = id()
	[ columns = columnList(true)] 
	<AS> <LPAREN> queryExpression = queryExpression(info) <RPAREN>
	{
	    return new WithQueryCommand(new GroupSymbol(validateAlias(name)), columns, queryExpression);
	}
}

QueryCommand queryExpressionBody(ParseInfo info) :
{
    QueryCommand query = null;
    QueryCommand rightQuery = null;
    boolean all = false;
    Option option = null;
	OrderBy orderby = null;
	Limit limit = null;
	SetQuery.Operation type;
}
{
	query = queryTerm(info) 
	(	(LOOKAHEAD( <UNION>, { getToken(2).kind != JOIN } ) <UNION> { type = SetQuery.Operation.UNION; } | <EXCEPT> { type = SetQuery.Operation.EXCEPT; }) 
 	 	[<ALL> { all = true; } | <DISTINCT>]
 	 	rightQuery = queryTerm(info)
 	   	{
 	   		query = addQueryToSetOperation(query, rightQuery, type, all);
    		all = false;
	   	}
	) *
    [orderby  = orderby(info) {query.setOrderBy( orderby );}]
    [limit    = limit(info) {query.setLimit( limit );}]
    [LOOKAHEAD(<OPTION>) option = option(info) { query.setOption(option);  }	]
    {
		return query;
    }    
}

QueryCommand queryTerm(ParseInfo info) : 
{
    QueryCommand query = null;
    QueryCommand rightQuery = null;
    boolean all = false;
}
{
	query=queryPrimary(info) 
	(	<INTERSECT> 
 		[<ALL> { all = true; } | <DISTINCT>] 
 		rightQuery=queryPrimary(info)
 		{
 	   		query = addQueryToSetOperation(query, rightQuery, SetQuery.Operation.INTERSECT, all);
    		all = false;
 		}
	) *
    {
        return query;
    }
}    

QueryCommand queryPrimary(ParseInfo info) : 
{
    QueryCommand query = null;
    String name = null;
}
{
    (
        query=query(info) | 
        (<TABLE> name=id() {
           Query q = new Query();
           q.setSelect(new Select(Arrays.asList(new MultipleElementSymbol())));
           q.setFrom(new From(Arrays.asList(new UnaryFromClause(new GroupSymbol(name)))));
           query = q;
        }) |
        (<LPAREN> query=queryExpressionBody(info) <RPAREN>)
    )    
    {
        return query;
    }
}    

/**
 * Parse a SELECT query
 * @return Parsed query
 * @throws ParseException if parsing failed
 */
Query query(ParseInfo info) :
{
	Select   select         = null;
	From     from           = null;
	Into 	 into			= null;
	Criteria criteria       = null;
	GroupBy  groupBy        = null;
	Criteria having         = null;	
}
{
    select	  = select(info)
    [into	  = into(info)]
   	[from 	  = from(info)
   		
    [criteria = where(info)]
    [groupBy  = groupBy(info)]
    [having   = having(info)]]

	{
		// Build query from parsed pieces
		Query query = new Query();
		query.setSelect( select );
		query.setFrom( from );
		query.setInto( into );
		query.setCriteria(criteria);
		query.setGroupBy(groupBy);
		query.setHaving(having);

		return query;
  	}
}

Into into(ParseInfo info) :
{
	String groupID = null;
	Into into = null;
}
{	
	<INTO>
	(groupID=id())
	{
    	into = new Into(new GroupSymbol(groupID));
		return into;
    }	
}

/**
 * <p>Parse a SELECT clause.  The select must handle elements, aliased elements
 * (x AS y), group.*, and *.  It also must handle an optional DISTINCT at the
 * beginning of the select list.  It also must handle a scalar subquery expression
 * in parentheses.</p>
 * <p>Example:  "SELECT group.element, group2.element2 AS x, group3.*". </p>
 * <p>Example:  "SELECT *". </p>
 * <p>Example:  "SELECT DISTINCT a, b, c".</p>
 * <p>Example:  "SELECT a, (SELECT b FROM groupC)".</p>
 * <p>Example:  "SELECT a, (SELECT b FROM groupC) as d".</p>
 * @return Parsed select
 * @throws ParseException if parsing failed
 */
Select select(ParseInfo info) :
{
	boolean isDistinct = false;		// unless DISTINCT keyword in SELECT
	Expression symbol = null;
	Select select = new Select();
}
{
	<SELECT>
	[<ALL> | (<DISTINCT> {isDistinct=true;})]
	(<STAR>
		{
			select.addSymbol(new MultipleElementSymbol());
		}
	|
		(	symbol=selectSymbol(info)      { select.addSymbol(symbol); }
		    (	<COMMA>
				symbol=selectSymbol(info)  { select.addSymbol(symbol); }
			)*		
		)
	)		
	{
 		select.setDistinct(isDistinct);
		return select;
	}
}

Expression selectSymbol(ParseInfo info) :
{
	Expression symbol = null;	
}
{
	(
		symbol = selectExpression(info)
		|
		symbol = allInGroupSymbol()
	)
	{
		return symbol;
	}
}

Expression selectExpression(ParseInfo info) :
{
	Expression expression = null;
    String alias = null;
}
{
	(	
		// Expression
		expression=expression(info)	
		[[<AS>] alias=id() ]
	)
	{		
		if(alias != null) {
			alias = validateAlias(alias); 
			return new AliasSymbol(alias, expression);
		}
		return expression;
	}
}

DerivedColumn derivedColumn(ParseInfo info) :
{
	Expression expression = null;
    String alias = null;
}
{
	(	
		// Expression
		expression=expression(info)	
		[<AS> alias=id() ]
	)
	{		
		if(alias != null) {
			alias = validateAlias(alias); 
		}
		return new DerivedColumn(alias, expression);
	}
}

MultipleElementSymbol allInGroupSymbol() :
{
	Token allInGroupToken = null;
	
}
{
   	allInGroupToken = <ALL_IN_GROUP>    
    {
		return new MultipleElementSymbol(normalizeId(allInGroupToken.image.substring(0, allInGroupToken.image.length() - 2)));
	}
}

AggregateSymbol orderedAgg(ParseInfo info) :
{
    Token t = null;
	Expression expression = null;
	OrderBy orderBy = null;
	Expression condition = null;
}
{
	(t=<XMLAGG>|t=<ARRAY_AGG>)
	<LPAREN>
	expression = expression(info)
	[ orderBy = orderby(info) ]
	<RPAREN>
	condition = filterClause(info)
	{
		String aggName = t.image.toUpperCase();
		AggregateSymbol	agg = new AggregateSymbol(aggName, false, expression);
		agg.setOrderBy(orderBy);
		agg.setCondition(condition);
		return agg;
	}
}

AggregateSymbol textAgg(ParseInfo info) :
{
	DerivedColumn expression = null;
	Character delimiter = null;
	Character quote = null;
	boolean header = false;	
	List<DerivedColumn> expressions = new ArrayList<DerivedColumn>();
	OrderBy orderBy = null;
	String encoding = null;
	Expression condition = null;
}
{
	nonReserved("TEXTAGG") <LPAREN>
	<FOR> expression = derivedColumn(info)
	{
		expressions.add(expression);
	}
	(<COMMA>
		expression = derivedColumn(info)
		{
			expressions.add(expression);
		}
	)* 		
	[
	  LOOKAHEAD(<ID>, { "delimiter".equalsIgnoreCase(getToken(1).image) }) <ID>
	  delimiter = charVal(info, "DELMITER")
	]
	[
	  LOOKAHEAD(<ID>, { "quote".equalsIgnoreCase(getToken(1).image) })
	  ( <ID> quote = charVal(info, "QUOTE") )
	]
	[
	  LOOKAHEAD(<ID>, { "header".equalsIgnoreCase(getToken(1).image) }) <ID>
	  { header = true; }
	]	
	[
	  LOOKAHEAD(<ID>, { "encoding".equalsIgnoreCase(getToken(1).image) })
	  ( <ID> encoding = id() )
	]
	[
		orderBy = orderby(info)
	]	
	<RPAREN>
	condition = filterClause(info)
	{
		TextLine tf = new TextLine();
		tf.setDelimiter(delimiter);
		tf.setQuote(quote);
		tf.setIncludeHeader(header);
		tf.setExpressions(expressions);
		tf.setEncoding(encoding);
		AggregateSymbol agg = new AggregateSymbol("TEXTAGG", false, tf);
		agg.setOrderBy(orderBy);
		agg.setCondition(condition);
		return agg;		
	}
}

AggregateSymbol aggregateSymbol(ParseInfo info) :
{
	String func = null;
	Token starToken = null;
	AggregateSymbol agg = null;
	boolean isDistinct = false;
	Expression expression = null;
	Expression condition = null;
}
{
	(
		// COUNT(*)
		(LOOKAHEAD(3) (
			func = nonReserved("COUNT")
			<LPAREN>
			starToken = <STAR>
			<RPAREN> )	|
		LOOKAHEAD(<ID>, {matchesAny(getToken(1).image, "rank", "dense_rank", "row_number") != null}) (func = nonReserved("row_number", "rank", "dense_rank", "percent_rank", "cume_dist")
			<LPAREN> <RPAREN>) |
		// Remaining aggregates
		(	(func = nonReserved("COUNT", "SUM", "AVG", "MIN", "MAX", "EVERY", "STDDEV_POP", "STDDEV_SAMP", "VAR_SAMP", "VAR_POP") 
				|
				<ANY> { func = "ANY"; }
				|
				<SOME> { func = "SOME"; }
			)
			<LPAREN>
			[ <DISTINCT> {isDistinct=true;} | <ALL>]
			expression = expression(info)
			<RPAREN>
		)) 
		condition = filterClause(info)
	)
	{
		func = func.toUpperCase();
		if(starToken == null) { 
			// Aggregate
			agg = new AggregateSymbol(func, isDistinct, expression);
		} else {
			// COUNT(*)			
			agg = new AggregateSymbol(func, false, null);
		}
		agg.setCondition(condition);
		return agg;
	}
}

Expression filterClause(ParseInfo info) :
{
	Expression condition = null;
}
{
	[ <FILTER> <LPAREN> <WHERE> condition = booleanPrimary(info) <RPAREN> ]
	{
		return condition;	
	}
}

/**
 * <p>Parse a FROM.  The from must handle groups, aliased groups or
 * joined groups. This also handles JDBC escape processinf syntax for outer joins.</p>
 * <p>Example:  "FROM a, b". </p>
 * <p>Example:  "FROM a AS x, b as Y". </p>
 * <p>Example:  "FROM a right outer join b, c, d join e".</p>
 * @param from object which is to be updated with the details in the from clause.
 * @return list containing criteria objects.
 * @throws ParseException if parsing failed
 */
From from(ParseInfo info) :
{
	FromClause clause = null;
	List clauseList = new LinkedList();
}
{
	<FROM>
	(	clause = tableReference(info)
		{
			clauseList.add(clause);
			clause = null;
		}
		
		(<COMMA> clause = tableReference(info)
			{
				clauseList.add(clause);
				clause = null;
			}
		)*
	) 

	{
		return new From(clauseList);	
	}
}					

/**
 * <p>Parse a join predicate clause, which occurs as an element in the FROM clause.  
 * The join predicate combines two from clauses with a join.</p>
 * @return Join predicate
 * @throws ParseException if parsing failed
 */
FromClause tableReference(ParseInfo info) :
{
	FromClause result = null;
}
{	
	(
		(	
			<LBRACE> nonReserved("OJ")
			result=joinedTable(info)
			<RBRACE>
		) 
		|
		result=joinedTable(info)
	)
	{
		return result;
	}
}	

FromClause joinedTable(ParseInfo info) :
{
	FromClause result = null;
	JoinPredicate jp = null;
}
{
	result = tablePrimary(info) /* this is a fix for left recursion in the spec */
	( LOOKAHEAD(2)	
		(	jp = crossJoin(info)
			| jp = qualifiedJoin(info)
		)
		{
			jp.setLeftClause(result);
			result = jp;
		}
	) *
	{
		return result;
	}
}

JoinPredicate crossJoin(ParseInfo info) :
{
	JoinPredicate result = new JoinPredicate();
	FromClause clause = null;
}
{
	(	(<CROSS> {result.setJoinType(JoinType.JOIN_CROSS);}|<UNION> {result.setJoinType(JoinType.JOIN_UNION);})
    	<JOIN> 
		clause = tablePrimary(info) {result.setRightClause(clause);}
	)
	{
		return result;
	}
}

JoinPredicate qualifiedJoin(ParseInfo info) :
{
	JoinPredicate result = new JoinPredicate();
	FromClause clause = null;
	Criteria onCriteria = null;
}
{
	(	[	(<RIGHT> {result.setJoinType(JoinType.JOIN_RIGHT_OUTER);} [<OUTER>])
    		| (<LEFT> {result.setJoinType(JoinType.JOIN_LEFT_OUTER);} [<OUTER>])
    		|  (<FULL> {result.setJoinType(JoinType.JOIN_FULL_OUTER);} [<OUTER>])
    		| <INNER>
		]
		<JOIN>
		clause = tableReference(info) {result.setRightClause(clause);}
		<ON>
		onCriteria = criteria(info) {result.setJoinCriteria(Criteria.separateCriteriaByAnd(onCriteria));}
	)
	{
		return result;
	}
}

FromClause tablePrimary(ParseInfo info) :
{
	FromClause clause = null;
	Token lparen = null;
}
{
	(	LOOKAHEAD(<ID> <LPAREN>, { "texttable".equalsIgnoreCase(getToken(1).image) }) clause = textTable(info)
	    |
	    LOOKAHEAD(<ID> <LPAREN>, { "arraytable".equalsIgnoreCase(getToken(1).image) }) clause = arrayTable(info)
	    |
	    clause = xmlTable(info)
	    |
	    clause = unaryFromClause(info)
		|
		LOOKAHEAD(subqueryFromClause(info)) clause = subqueryFromClause(info) 
	    |			
		(lparen = <LPAREN> clause = joinedTable(info) 
		 {
			setFromClauseOptions(lparen, clause);
		 }
		 <RPAREN> 
		)
	)
	[	(<MAKEDEP>  { clause.setMakeDep(true); })
	 	| (<MAKENOTDEP> {  clause.setMakeNotDep(true); } )
	]
	{
		return clause;
	}
}

XMLSerialize xmlSerialize(ParseInfo info) :
{
	Expression expr = null;
	String doc = null;
	Token t = null;
}
{
	<XMLSERIALIZE> <LPAREN>
	[LOOKAHEAD(<ID>, {matchesAny(getToken(1).image, "document", "content") != null}) doc = nonReserved("DOCUMENT", "CONTENT")]
	expr = expression(info)
	[
		<AS> (t = <STRING> | t = <VARCHAR> | t = <CLOB>)
	]
	<RPAREN>
	{
		XMLSerialize result = new XMLSerialize();
		result.setExpression(expr);
		if (doc != null) {
			result.setDocument("document".equalsIgnoreCase(doc));
		}
		if (t != null) {
			result.setTypeString(t.image);
		}
		return result;
	}
}

String nonReserved(String... expected) :
{
	Token t = null;
}
{
	t = <ID> 
	{
		String result = matchesAny(t.image, expected);
		if (result != null) {
			return result;
		}
		throw new ParseException(QueryPlugin.Util.getString("SQLParser.expected_non_reserved", Arrays.toString(expected), t.image));
	}
}

ArrayTable arrayTable(ParseInfo info) :
{
	Expression array = null;
	List<TableFunctionReference.ProjectedColumn> columns;
	String aliasID = null;
}
{
 	<ID> <LPAREN> array = expression(info)
 	nonReserved("COLUMNS")
 	columns = createElementsWithTypes(info) 
 	<RPAREN>
 	[<AS>] aliasID=id()
 	{
 		ArrayTable result = new ArrayTable();
 		result.setArrayValue(array);
 		result.setColumns(columns);
 		result.setName(validateAlias(aliasID));
 		return result;
 	}
}

TextTable textTable(ParseInfo info) :
{
	Expression file = null;
	TextTable.TextColumn column = null;
	List<TextTable.TextColumn> columns = new ArrayList<TextTable.TextColumn>();
	boolean useRowDelimiter = true;
	Character delimiter = null;
	boolean escape = false;
	Character quote = null;
	Integer header = null;
	Integer skip = null;
	String selector = null;
	String aliasID = null;
}
{
 	<ID> <LPAREN> file = expression(info)
 	[
	  LOOKAHEAD(<ID>, { "selector".equalsIgnoreCase(getToken(1).image) }) <ID>
	  selector = stringVal()
	]
 	nonReserved("COLUMNS")
 	column = textColumn(info)
	{
		columns.add(column);
	} 
	(<COMMA>
		column = textColumn(info)
		{
			columns.add(column);
		}
	)* 
	[
	  <NO> <ROW> nonReserved("DELIMITER")
	  {
	    useRowDelimiter = false;
	  }
	]
	[
	  LOOKAHEAD(<ID>, { "delimiter".equalsIgnoreCase(getToken(1).image) }) <ID>
	  delimiter = charVal(info, "DELMITER")
	]
	[
	  (<ESCAPE> quote = charVal(info, "ESCAPE") ) { escape = true; }
	  |
	  LOOKAHEAD(<ID>, { "quote".equalsIgnoreCase(getToken(1).image) })
	  ( <ID> quote = charVal(info, "QUOTE") )
	]
	[
	  LOOKAHEAD(<ID>, { "header".equalsIgnoreCase(getToken(1).image) }) <ID>
	  [
	  	header = intVal()
	  ]
	  {
	  	if (header == null) {
	  		header = 1;
	  	}
	  }
	]
	[
	  LOOKAHEAD(<ID>, { "skip".equalsIgnoreCase(getToken(1).image) }) <ID>
	  skip = intVal()
	]
 	<RPAREN>
 	[<AS>] aliasID=id()
 	{
 		TextTable result = new TextTable();
 		result.setFile(file);
 		result.setColumns(columns);
 		result.setDelimiter(delimiter);
 		result.setEscape(escape);
 		result.setHeader(header);
 		result.setSkip(skip);
 		result.setName(validateAlias(aliasID));
 		result.setQuote(quote);
 		result.setUsingRowDelimiter(useRowDelimiter);
 		result.setSelector(selector);
 		return result;
 	}
}

TextTable.TextColumn textColumn(ParseInfo info):
{
	String name = null;
	Constant datatype = null;
	Integer width = null;
	boolean noTrim = false;
	String selector = null;
	Integer position = null;
}
{
	name = id()
	datatype = dataType()
	[ 
	  	LOOKAHEAD(<ID>, { "width".equalsIgnoreCase(getToken(1).image) }) <ID>
	  	width = intVal() 
	  	[ LOOKAHEAD(2)
		  	<NO> nonReserved("TRIM")
		  	{
				noTrim = true;	  	
		  	}
		]
	]
	[ 
	  	LOOKAHEAD(<ID>, { "selector".equalsIgnoreCase(getToken(1).image) }) <ID>
	    selector = stringVal()
	  	position = intVal() 
	]
	{
		TextTable.TextColumn result = new TextTable.TextColumn(validateElementName(name), (String)datatype.getValue(), width, noTrim);
		result.setSelector(selector);
		result.setPosition(position);
		return result;
	}
}

XMLQuery xmlQuery(ParseInfo info) :
{
	String xquery = null;
	XMLNamespaces xmlNamespaces = null;
	DerivedColumn passing = null;
	ArrayList<DerivedColumn> passingValues = new ArrayList<DerivedColumn>();
	Boolean content = null;
	Boolean empty = null;
}
{
 	<XMLQUERY> <LPAREN> 
 	[ xmlNamespaces = xmlNamespaces(info) <COMMA> ]
 	xquery = stringVal()
 	[ 
 	  LOOKAHEAD(<ID>, { "passing".equalsIgnoreCase(getToken(1).image) }) <ID>
 	  passing = derivedColumn(info)
 	  {
 	  	passingValues.add(passing);
 	  	passing.setPropagateName(false);
 	  }
 	  (<COMMA>
 	    passing = derivedColumn(info)
 	    {
 	  	  passingValues.add(passing);
 	  	  passing.setPropagateName(false);
 	    }
 	  )*
 	]
/* 	[
 	  LOOKAHEAD(<ID>, { "returning".equalsIgnoreCase(getToken(1).image) }) <ID>
 	  (
 	  	LOOKAHEAD(<ID>, { "content".equalsIgnoreCase(getToken(1).image) }) <ID> { content = true; }
 	  	|
 	  	LOOKAHEAD(<ID>, { "sequence".equalsIgnoreCase(getToken(1).image) }) (<ID> { content = false; }
 	  )
 	]*/
 	[
 	  (<NULL> { empty = false; }
 	   |
 	   nonReserved("EMPTY") { empty = true; }
 	  )
 	  <ON> nonReserved("EMPTY")
 	]
 	<RPAREN>
 	{
 		XMLQuery result = new XMLQuery();
 		result.setXquery(xquery);
 		result.setNamespaces(xmlNamespaces);
 		result.setPassing(passingValues);
 		result.setEmptyOnEmpty(empty);
 		return result;
 	}
}

XMLTable xmlTable(ParseInfo info) :
{
	String xquery = null;
	XMLNamespaces xmlNamespaces = null;
	DerivedColumn passing = null;
	ArrayList<DerivedColumn> passingValues = new ArrayList<DerivedColumn>();
	XMLTable.XMLColumn column = null;
	ArrayList<XMLTable.XMLColumn> columns = new ArrayList<XMLTable.XMLColumn>();
	String aliasID = null;
}
{
 	<XMLTABLE> <LPAREN> 
 	[ xmlNamespaces = xmlNamespaces(info) <COMMA> ]
 	xquery = stringVal()
 	[ 
 	  LOOKAHEAD(<ID>, { "passing".equalsIgnoreCase(getToken(1).image) }) <ID>
 	  passing = derivedColumn(info)
 	  {
 	  	passingValues.add(passing);
 	  	passing.setPropagateName(false);
 	  }
 	  (<COMMA>
 	    passing = derivedColumn(info)
 	    {
 	  	  passingValues.add(passing);
 	  	  passing.setPropagateName(false);
 	    }
 	  )*
 	]
 	
 	[
 	  LOOKAHEAD(<ID>, { "columns".equalsIgnoreCase(getToken(1).image) }) <ID>
 	  column = xmlColumn(info)
 	  {
 	    columns.add(column);
 	  }
 	  (<COMMA>
 	    column = xmlColumn(info)
 	    {
 	      columns.add(column); 	    
 	    }
 	  )*
 	]
 	<RPAREN>
 	[<AS>] aliasID=id()
 	{
 		XMLTable result = new XMLTable();
 		result.setXquery(xquery);
 		result.setNamespaces(xmlNamespaces);
 		result.setPassing(passingValues);
 		result.setColumns(columns);
 		result.setName(validateAlias(aliasID));
 		return result;
 	}
}

XMLTable.XMLColumn xmlColumn(ParseInfo info):
{
	String name = null;
	Constant datatype = null;
	String path = null;
	Expression defaultExpr = null;
}
{
	name = id()
	
	((
	  <FOR> nonReserved("ORDINALITY") 
	  {
	    return new XMLTable.XMLColumn(name); 
	  }	
	) | (
      datatype = dataType()
      [
	    <DEFAULT_KEYWORD> defaultExpr = expression(info)
	  ]
      [ 
	    nonReserved("PATH") path = stringVal()
	  ]
	  {
		return new XMLTable.XMLColumn(name, (String)datatype.getValue(), path, defaultExpr);
	  }
	))
}

int intVal() :
{
	Token t;
}
{
	t = <INTEGERVAL>
	{
		try { 
			return Integer.valueOf(t.image); 				
		} catch(NumberFormatException e1) { 
			throw new ParseException(QueryPlugin.Util.getString("SQLParser.Integer_parse", t.image)); //$NON-NLS-1$
		}
	}
}


/**
 * Parse a unary from clause, which is just a single group name and an optional alias.
 * @return Unary from clause containing the group
 * @throws ParseException if parsing failed
 */
SubqueryFromClause subqueryFromClause(ParseInfo info) :
{
    String aliasID = null;
	Command command = null;
	Token lparen = null;
	boolean table = false;
}
{	
	[
		<TABLE> { table = true; }
	]
	lparen = <LPAREN> 
	( command = queryExpression(info) |
      command = storedProcedure(info, new StoredProcedure()) )
	<RPAREN>
	[<AS>]
	aliasID = id()
	
	{
		SubqueryFromClause clause = new SubqueryFromClause(validateAlias(aliasID), command);
        setFromClauseOptions(lparen, clause);
        clause.setTable(table);
        return clause;
    }	
}	
		
/**
 * Parse a unary from clause, which is just a single group name and an optional alias.
 * @return Unary from clause containing the group
 * @throws ParseException if parsing failed
 */
UnaryFromClause unaryFromClause(ParseInfo info) :
{
	GroupSymbol group = null;
	Token groupID = null;
    String aliasID = null;
	UnaryFromClause clause = null;
}
{	
	(groupID=<ID> [[<AS>] aliasID=id()])
	{
    	if(aliasID != null) {		
            group = new GroupSymbol(validateAlias(aliasID), normalizeId(groupID.image));
        } else {
			group = new GroupSymbol(normalizeId(groupID.image));
        }
        clause = new UnaryFromClause(group);
        setFromClauseOptions(groupID, clause);
		return clause;
    }	
}		

/**
 * <p>Parse a WHERE clause.  The where clause holds a criteria.
 * @return Parsed where
 * @throws ParseException if parsing failed
 */
Criteria where(ParseInfo info) :
{
    Criteria criteria = null;
}
{
    <WHERE>
	criteria = criteria(info)
	
	{
		return criteria;
	}
}

/**
 * <p>Parse a criteria.  This will parse any criteria expression.</p>
 * @return Parsed criteria
 * @throws ParseException if parsing failed
 */
Criteria criteria(ParseInfo info) :
{
	Criteria criteria = null;
}
{	
	criteria = compoundCritOr(info)

	{
		return criteria;
	}
}

/** 
 * <p>Parse a compound logical OR criteria.</p>
 * @return Parsed OR criteria
 * @throws ParseException if parsing failed
 */
Criteria compoundCritOr(ParseInfo info) :
{
    ArrayList logicList = new ArrayList(2);
    Criteria logicPart = null;
}
{
	logicPart=compoundCritAnd(info) 				{ logicList.add(logicPart); }
	(<OR> logicPart=compoundCritAnd(info) 			{ logicList.add(logicPart); } )*

	{
		if(logicList.size() == 1) {
			return (Criteria) logicList.get(0);
		} else {
         	return new CompoundCriteria(CompoundCriteria.OR,logicList);
		}
	}
}

/**
 * <p>Parse a compound logical AND criteria.</p>
 * @return Parsed AND criteria
 * @throws ParseException if parsing failed
 */
Criteria compoundCritAnd(ParseInfo info) :
{
    ArrayList logicList = new ArrayList(2);
    Criteria logicPart = null;
}
{
	logicPart=notCrit(info) 			{ logicList.add(logicPart); }
	(<AND> logicPart=notCrit(info) 		{ logicList.add(logicPart); } )*

	{
   		if(logicList.size() == 1) {
			return (Criteria) logicList.get(0);
		} else {	
         	return new CompoundCriteria(CompoundCriteria.AND,logicList);
		}	
	}
}

/**
 * <p>Parse a logical NOT criteria.</p>
 * @return Parsed NOT criteria
 * @throws ParseException if parsing failed
 */
Criteria notCrit(ParseInfo info) :
{
    Expression ex = null;
	boolean isNot = false;
}
{
	[<NOT> {isNot=true;}] 
	ex=booleanPrimary(info)

	{
	    Criteria crit = null;
	    if (ex instanceof Criteria) {
	      crit = (Criteria)ex;
	    } else {
	      crit = new ExpressionCriteria(ex);
	    }
  		if(isNot) { 
  			return new NotCriteria(crit);
		} else {
			return crit;
		}
	}
}

/**
 * <p>Parse a boolean primary.</p>
 * @return criteria
 * @throws ParseException if parsing failed
 */
Expression booleanPrimary(ParseInfo info) :
{
    Expression ex = null;
}
{
    (
	    (ex = commonValueExpression(info)
	     [(
			LOOKAHEAD(2) ex=betweenCrit(info, ex) |
			LOOKAHEAD(2) ex=matchCrit(info, ex) |
			LOOKAHEAD(2) ex=regexMatchCrit(info, ex) |
			ex=setCrit(info, ex) |
			ex=isNullCrit(info, ex) |
			LOOKAHEAD(operator() (<ANY>|<SOME>|<ALL>) subquery(info)) ex=subqueryCompareCriteria(info, ex) |
			ex=compareCrit(info, ex)
	     )]
	    )
	    |
		ex=existsCriteria(info)
    )
	{
		return ex;
	}
}

Token operator() :
{
	Token operator = null;
}
{
	(operator=<EQ> |
    operator=<NE> |
    operator=<NE2> |
    operator=<LT> |
    operator=<LE> |
    operator=<GT> |
    operator=<GE>
    )
    {
    	return operator;
    }
}


/**
 * <p>Parse a compare criteria.</p>
 * @return Parsed compare criteria
 * @throws ParseException if parsing failed
 */
CompareCriteria compareCrit(ParseInfo info, Expression expression) :
{
    Expression value = null;
    Token operator = null;
}
{
	operator=operator()
	value=commonValueExpression(info)

	{
		CompareCriteria compareCriteria = new CompareCriteria();

		// Set left expression
		compareCriteria.setLeftExpression(expression);

		compareCriteria.setOperator(getOperator(operator.image));
		
		// Set value
		compareCriteria.setRightExpression(value);

	    return compareCriteria;
	}
}

QueryCommand subquery(ParseInfo info) :
{
    QueryCommand subquery = null;
    StoredProcedure proc = null;
}
{
	<LPAREN>
	( subquery = queryExpression(info) | 
	 (
		proc = storedProcedure(info, new StoredProcedure()) //deprecated	  
	 )
	 {
	    subquery = new Query(new Select(Arrays.asList(new MultipleElementSymbol())), new From(Arrays.asList(new SubqueryFromClause("x", proc))), null, null, null);
	 }
	)
	<RPAREN>
	{
		return subquery;
	}
}

Object[] subqueryAndHint(ParseInfo info) :
{
    QueryCommand subquery = null;
    Token lparen = null;
}
{
	{lparen = getToken(1);}
	subquery = subquery(info)
	{
		return new Object[] {subquery, getSubqueryHint(lparen)};
	}
}

/** 
 * <p>Parse a subquery compare criteria.</p>
 * @return Parsed subquery compare criteria
 * @throws ParseException if parsing failed
 */
SubqueryCompareCriteria subqueryCompareCriteria(ParseInfo info, Expression expression) :
{
    SubqueryCompareCriteria subqueryCrit = null;
    QueryCommand subquery = null;
    Token operator = null;
    Token quantifier = null;
    
}
{
	operator=operator()
	( quantifier=<ANY> |
	  quantifier=<SOME> |
	  quantifier=<ALL>
	)
	subquery = subquery(info)

	{
		subqueryCrit = new SubqueryCompareCriteria();
	    subqueryCrit.setLeftExpression(expression);
	    subqueryCrit.setCommand(subquery);
    
		// Set operator
		subqueryCrit.setOperator(getOperator(operator.image));

		// Set predicate quantifier
		if(quantifier.image.equalsIgnoreCase("any")) { //$NON-NLS-1$
			subqueryCrit.setPredicateQuantifier(SubqueryCompareCriteria.ANY);
		} else if(quantifier.image.equalsIgnoreCase("some")) { //$NON-NLS-1$
			subqueryCrit.setPredicateQuantifier(SubqueryCompareCriteria.SOME);
		} else if(quantifier.image.equalsIgnoreCase("all")) { //$NON-NLS-1$
			subqueryCrit.setPredicateQuantifier(SubqueryCompareCriteria.ALL);
		} 

	    return subqueryCrit;
   	}
}

/**
 * <p>Parse a match criteria. Also parses JDBC escape syntax for match criteria.</p>
 * @return Parsed match criteria
 * @throws ParseException if parsing failed
 */
MatchCriteria matchCrit(ParseInfo info, Expression expression) :
{
    Character esc = null;
	Expression value = null;
	boolean negated = false;
	boolean similar = false;
}
{
	[<NOT> {negated = true;}]
    (<LIKE>|(<SIMILAR> <TO> {similar = true;}))
	value=commonValueExpression(info)
    [   <ESCAPE> esc = charVal(info, "LIKE/SIMILAR TO ESCAPE") |
        (<LBRACE> <ESCAPE> esc = charVal(info, "LIKE/SIMILAR TO ESCAPE") <RBRACE>) 
    ]
	{
    	MatchCriteria matchcriteria = new MatchCriteria(expression, value);
		matchcriteria.setNegated(negated);
	    if(esc != null) {
			matchcriteria.setEscapeChar(esc.charValue());
		}
		matchcriteria.setMode(similar?MatchMode.SIMILAR:MatchMode.LIKE);
		return matchcriteria;
   	}
}

MatchCriteria regexMatchCrit(ParseInfo info, Expression expression) :
{
	Expression value = null;
	boolean negated = false;
}
{
	[<NOT> {negated = true;}]
    <LIKE_REGEX>
	value=commonValueExpression(info)
	{
    	MatchCriteria matchcriteria = new MatchCriteria(expression, value);
		matchcriteria.setNegated(negated);
		matchcriteria.setMode(MatchMode.REGEX);
		return matchcriteria;
   	}
}

Character charVal(ParseInfo info, String type) :
{
	String escStr = null;
}
{
	escStr=stringVal()
	{
		if (escStr.length() != 1) {
			throw new ParseException(QueryPlugin.Util.gs(QueryPlugin.Event.TEIID30398, type, escStr)); //$NON-NLS-1$
		}
		return Character.valueOf(escStr.charAt(0));
	}
}

/**
 * <p>Parse an [NOT] BETWEEN criteria.</p>
 * @return Parsed BETWEEN criteria
 * @throws ParseException if parsing failed
 */
BetweenCriteria betweenCrit(ParseInfo info, Expression expression) :
{
	Expression lowerExpression = null, upperExpression = null;
	boolean negated = false;
}
{
	[<NOT> {negated=true;}]
	<BETWEEN>
	lowerExpression = commonValueExpression(info)
	<AND>
	upperExpression = commonValueExpression(info)
	
	{
		BetweenCriteria criteria = new BetweenCriteria(expression, lowerExpression, upperExpression);
		criteria.setNegated(negated);
		return criteria;
	}
}

/**
 * <p>Parse an IS [NOT] NULL criteria.</p>
 * @return Parsed IS NULL criteria
 * @throws ParseException if parsing failed
 */
IsNullCriteria isNullCrit(ParseInfo info, Expression expression) :
{
	boolean negated = false;
	IsNullCriteria criteria = null;
}
{
	<IS>
	[<NOT> {negated = true;}]
	<NULL>

	{
	criteria = new IsNullCriteria(expression);
	criteria.setNegated(negated);
	return criteria;
	}
}

/** 
 * <p>Parse a set criteria.</p>
 * @return Parsed set criteria
 * @throws ParseException if parsing failed
 */
AbstractSetCriteria setCrit(ParseInfo info, Expression expression) :
{
	Expression value = null;
	List setList = new ArrayList();
	Object[] command = null;
	boolean negated = false;
	AbstractSetCriteria criteria = null;
}
{
	[<NOT> {negated = true;}]
	<IN>
	(
		LOOKAHEAD(subquery(info)) (command = subqueryAndHint(info)) |
		(
			<LPAREN>
			value = commonValueExpression(info)
			{
				setList.add(value);
			}
			( <COMMA>
				value = commonValueExpression(info)
				{
					setList.add(value);
				}
			)*
			<RPAREN>
		)
	)
	{
	    if (command != null) {
			SubquerySetCriteria ssc = new SubquerySetCriteria(expression, (QueryCommand)command[0]);
			ssc.setSubqueryHint((ExistsCriteria.SubqueryHint)command[1]);
			criteria = ssc;
		} else {
		    criteria = new SetCriteria(expression, setList);
		}
	    criteria.setNegated(negated);
	    return criteria;
   	}
}

/** 
 * <p>Parse an exists criteria.</p>
 * @return Parsed exists criteria
 * @throws ParseException if parsing failed
 */
ExistsCriteria existsCriteria(ParseInfo info) :
{
    Object[] subquery = null;
}
{
	<EXISTS>
	subquery = subqueryAndHint(info)

	{
		ExistsCriteria existsCrit = new ExistsCriteria((QueryCommand)subquery[0]);
		existsCrit.setSubqueryHint((ExistsCriteria.SubqueryHint)subquery[1]);
	    return existsCrit;
   	}
}

/**
 * <p>Parse a GROUP BY clause.  </p>
 * @return Parsed group by
 * @throws ParseException if parsing failed
 */
GroupBy groupBy(ParseInfo info) :
{
	List<Expression> expressions = null;
}
{
	<GROUP> <BY>
    expressions = expressionList(info)	
	{
		return new GroupBy(expressions);
	}
}

/**
 * <p>Parse a HAVING clause.  </p>
 * @return Parsed having
 * @throws ParseException if parsing failed
 */
Criteria having(ParseInfo info) :
{
    Criteria criteria = null;
}
{
    <HAVING>
	criteria = criteria(info)
	{
		return criteria;
	}
}

	
/** 
 * <p>Parse an ORDER BY clause.</p>
 * @return Parsed ORDER BY
 * @throws ParseException if parsing failed
 */
OrderBy orderby(ParseInfo info) :
{
    OrderBy orderby = new OrderBy();
    OrderByItem item = null;
}
{
	<ORDER> <BY>
	item = sortSpecification(info)
	{
    	orderby.getOrderByItems().add(item);
	}
	(<COMMA>
		item = sortSpecification(info)
		{
    		orderby.getOrderByItems().add(item);
		}
	)*
	{
	    return orderby;
	}
}

OrderByItem sortSpecification(ParseInfo info) :
{
    Expression ex = null;
    boolean ascending = true;
    String nullOrdering = null;    
}
{
	ex=sortKey(info) 
	[<ASC> | <DESC> {ascending=false;}]
	[nonReserved("NULLS") nullOrdering = nonReserved("FIRST", "LAST")] 
	{
    	OrderByItem item = new OrderByItem(ex, ascending);
    	if (nullOrdering != null) {
    		item.setNullOrdering(org.teiid.language.SortSpecification.NullOrdering.valueOf(nullOrdering.toUpperCase()));
    	}
    	return item;
	}
}

Expression sortKey(ParseInfo info) :
{
    Expression ex = null;
}
{
    ex=expression(info)
    {
        //legacy support check for positional constants
        if (ex instanceof Constant) {
        	boolean valid = false;
            Constant c = (Constant)ex;
            if (c.getValue() instanceof Integer) {
                Integer val = (Integer)c.getValue();
                valid = val.intValue() > 0;
            }      
            if (!valid) {
            	throw new ParseException(QueryPlugin.Util.getString("SQLParser.non_position_constant", ex)); //$NON-NLS-1$
            }
        } 
        return ex;
    }
}

Expression intParam(ParseInfo info) :
{
   Integer val = null;
}
{
   (val = intVal() | <QMARK>)
   {
     if (val == null) {
       return new Reference(info.referenceCount++);
     } 
     return new Constant(val, DataTypeManager.DefaultDataClasses.INTEGER);
   }
}

/** 
 * <p>Parse an LIMIT clause.</p>
 * @return Parsed LIMIT
 * @throws ParseException if parsing failed
 */
Limit limit(ParseInfo info) :
{
	Expression limit = null;
	Expression offset = null;
	Token t = null;
}
{
    {t = getToken(1);}
    ((<LIMIT> offset = intParam(info)
	[<COMMA> limit = intParam(info)])
	{
	  if (limit == null) {
	    limit = offset;
	    offset = null;
	  }
	}
	|
	(<OFFSET> offset = intParam(info) (<ROW>|<ROWS>) 
    [limit = fetchLimit(info)])
    |
    (limit = fetchLimit(info)))
	{
		Limit result = new Limit(offset, limit);
		result.setStrict(!isNonStrictHint(t));
		return result;
	}
}

Expression fetchLimit(ParseInfo info) :
{
    Expression limit = null;
}
{
    <FETCH> nonReserved("FIRST", "NEXT") [limit = intParam(info)] (<ROW>|<ROWS>) <ONLY>
    {
      if (limit == null) {
        return new Constant(1, DataTypeManager.DefaultDataClasses.INTEGER); 
      }
      return limit;
    }
}

/** 
 * <p>Parse an OPTION clause.</p>
 * @return Parsed OPTION clause
 * @throws ParseException if parsing failed
 */
Option option(ParseInfo info) :
{
	String id = null;
	Token nocache = null;
	Option option = new Option();
}
{
	<OPTION>
	(
		<MAKEDEP>		
		id=id()
		{
            option.addDependentGroup(id);
		}
		(<COMMA>
			id=id()
			{
                option.addDependentGroup(id);
	        }
		)* |
		<MAKENOTDEP>		
		id=id()
		{
            option.addNotDependentGroup(id);
		}
		(<COMMA>
			id=id()
			{
                option.addNotDependentGroup(id);
	        }
		)* |
		
		nocache	= <NOCACHE>		
		[id=id()
		{
            option.addNoCacheGroup(id);
		}
		(<COMMA>
			id=id()
			{
                option.addNoCacheGroup(id);
	        }
		)*]
	)*

	{
		option.setNoCache( (nocache != null) );
		return option;
	}
}

/**
 * <p>Parse an expression - made up of literals and functions.</p>
 * @return Expression
 * @throws ParseException if parsing failed
 */
Expression expression(ParseInfo info) :
{
	Expression expression = null;
}
{
    expression = criteria(info)
	{
		if (expression instanceof ExpressionCriteria) {
			return ((ExpressionCriteria)expression).getExpression();
		}
		return expression;
	}
}

Expression commonValueExpression(ParseInfo info) :
{
	Expression leftExpression = null;
	Expression rightExpression = null;
}
{
	(	leftExpression=plusExpression(info)
		(
			<CONCAT_OP>
			rightExpression=plusExpression(info)
			{
				leftExpression = new Function("||", new Expression[] {leftExpression, rightExpression}); //$NON-NLS-1$
				rightExpression = null;				
			}
		)*
	)

	{
		return leftExpression;
	}
}

/**
 * <p>Parse an expression - made up of literals and functions.</p>
 * @return Expression
 * @throws ParseException if parsing failed
 */
Expression plusExpression(ParseInfo info) :
{
	Expression leftExpression = null;
	Expression rightExpression = null;
	String operator = null;
}
{
	(	leftExpression=timesExpression(info)
		(
			operator=plusOperator()
			rightExpression=timesExpression(info)
			{
				leftExpression = new Function(operator, new Expression[] { leftExpression, rightExpression });
				rightExpression = null;
				operator = null;
			}
		)*
	)

	{
		return leftExpression;
	}
}

/**
 * <p>Parse the add/subtract operators.</p>
 * @return "+" or "-"
 * @throws ParseException if parsing failed
 */
String plusOperator() :
{
	Token operator = null;
}
{
	(	operator = <PLUS> |
		operator = <MINUS>
	)

	{
		return operator.image;
	}
}

/**
 * <p>Parse an expression - made up of literals and functions.</p>
 * @return Expression
 * @throws ParseException if parsing failed
 */
Expression timesExpression(ParseInfo info) :
{
	Expression leftExpression = null;
	Expression rightExpression = null;
	String operator = null;
}
{
	(	leftExpression=valueExpressionPrimary(info)
		(
			operator=timesOperator()
			rightExpression=valueExpressionPrimary(info) 
			{
				leftExpression = new Function(operator, new Expression[] {leftExpression, rightExpression});
				rightExpression = null;
				operator = null;
			}
		)*
	)

	{
		return leftExpression;
	}
}

/**
 * <p>Parse the multiply/divide operator.</p>
 * @return "*" or "/"
 * @throws ParseException if parsing failed
 */
String timesOperator() :
{
	Token operator = null;
}
{
	(	operator = <STAR> |
		operator = <SLASH>
	)

	{
		return operator.image;
	}
}

/**
 * <p>Parse a basic expression.</p>
 * @return Expression
 * @throws ParseException if parsing failed
 */
Expression valueExpressionPrimary(ParseInfo info) :
{
	Token refToken = null;
	Expression expression = null;
	Token symbol = null;
	Constant literal = null;	
	QueryCommand subquery = null;
	Integer arrayIndex = null;
}
{
        (
		// Reference
		refToken=<QMARK>
		|
		refToken=<POS_REF>
		|
		// Literal
		literal=literal()
		|
		// Escaped function
		(	<LBRACE> nonReserved("FN")
			expression=function(info)
			<RBRACE>
		)
		|
		LOOKAHEAD(<ID> <LPAREN>, {matchesAny(getToken(1).image, "textagg") != null}) 
		(expression=textAgg(info) [expression = windowSpecification(expression, info)])				
		|		
		// Aggregate function
		LOOKAHEAD(<ID> <LPAREN>, {matchesAny(getToken(1).image, "count", "min", "max", "sum", "avg", "every", "STDDEV_POP", "STDDEV_SAMP", "VAR_SAMP", "VAR_POP") != null}) 
		(expression=aggregateSymbol(info) [expression = windowSpecification(expression, info)])
		|
		LOOKAHEAD(<ANY>|<SOME>) (expression=aggregateSymbol(info) [expression = windowSpecification(expression, info)])
		|
		expression=orderedAgg(info) [expression = windowSpecification(expression, info)]
		|
		LOOKAHEAD(<ID> <LPAREN>, {matchesAny(getToken(1).image, "rank", "dense_rank", "row_number") != null}) 
		(expression=aggregateSymbol(info) expression = windowSpecification(expression, info))
		|
		// Function
		LOOKAHEAD(2) (expression=function(info) [expression = windowSpecification(expression, info)])
		|
		// ElementSymbol
		(symbol=<ID> 
			{
				String symbolImage = symbol.image;
				if(isStringLiteral(symbolImage, info)) {
				    literal = new Constant(normalizeStringLiteral(symbolImage));
				    symbol = null;
				}  
			}
			(<LSBRACE> arrayIndex = intVal() <RSBRACE>)?
		)
		|
		LOOKAHEAD(subquery(info)) subquery = subquery(info)
		|
		( <LPAREN> 
 			expression = expression(info)
		  <RPAREN>
		  (<LSBRACE> arrayIndex = intVal() <RSBRACE>)?
		)
		|
		// Searched CASE expressions
		LOOKAHEAD(2) expression = searchedCaseExpression(info)
		|
		// Non-searched CASE expressions
		expression = caseExpression(info)
	)						
		
	{
		if(refToken != null) {
		    if (refToken.image.charAt(0) == '$') {
				return new Reference(Integer.parseInt(refToken.image.substring(1)) -1);
		    }
			expression = new Reference(info.referenceCount++);
		} else if(symbol != null) {
			expression = new ElementSymbol(normalizeId(symbol.image));
		} else if(literal != null) {
			expression = literal;		// may be null literal
		} else if (subquery != null){
			expression = new ScalarSubquery(subquery);
		}
		if (arrayIndex != null) {
			expression = new Function("array_get", new Expression[] {expression, new Constant(arrayIndex)});		
		}
		return expression;
	}
}

Expression windowSpecification(Expression agg, ParseInfo info) :
{
	List<Expression> partitionList = null;
	OrderBy orderBy = null;
}
{
	<OVER> 
    <LPAREN> 
    [<PARTITION> <BY> partitionList = expressionList(info)]
    [orderBy = orderby(info)]
    <RPAREN>
    {
    	WindowFunction result = new WindowFunction();
    	WindowSpecification ws = new WindowSpecification();
    	if (!(agg instanceof AggregateSymbol)) {
	   		throw new ParseException(QueryPlugin.Util.getString("SQLParser.invalid_window", agg)); //$NON-NLS-1$
    	}
    	result.setFunction((AggregateSymbol)agg);
    	ws.setPartition(partitionList);
    	ws.setOrderBy(orderBy);
    	result.setWindowSpecification(ws);
    	return result;
    }
}

/**
 * Parse a non-searched CASE expression.
 * @return CaseExpression
 * @throws ParseException if parsing failed
 */
CaseExpression caseExpression(ParseInfo info) :
{
	Expression expression = null, whenExpression = null, thenExpression = null, elseExpression = null;
	ArrayList whenExpressions = new ArrayList(2);
	ArrayList thenExpressions = new ArrayList(2);
}
{
	<CASE>
	expression = expression(info)
	(
		<WHEN>
		whenExpression = expression(info)
		<THEN>
		thenExpression = expression(info)
		{
			whenExpressions.add(whenExpression);
			thenExpressions.add(thenExpression);
		}
	)+
	[<ELSE> elseExpression = expression(info)]
	<END>
	{
		CaseExpression caseExpr = new CaseExpression(expression, whenExpressions, thenExpressions);
		caseExpr.setElseExpression(elseExpression);
		return caseExpr;
	}
}

/**
 * Parse a searched CASE expression.
 * @return SearchedCaseExpression
 * @throws ParseException if parsing failed
 */
SearchedCaseExpression searchedCaseExpression(ParseInfo info) :
{
	Expression thenExpression = null, elseExpression = null;
	Criteria whenCriteria = null;
	ArrayList whenCriteriaList = new ArrayList(2);
	ArrayList thenExpressions = new ArrayList(2);
}
{
	<CASE>
	(
		<WHEN>
		whenCriteria = criteria(info)
		<THEN>
		thenExpression = expression(info)
		{
			whenCriteriaList.add(whenCriteria);
			thenExpressions.add(thenExpression);
		}
	)+
	
	[<ELSE> elseExpression = expression(info)]
	<END>
	{
		SearchedCaseExpression caseExpr = new SearchedCaseExpression(whenCriteriaList, thenExpressions);
		caseExpr.setElseExpression(elseExpression);
		return caseExpr;
	}
}

/**
 * <p>Parse a function. </p>
 * @return Parsed function
 * @throws ParseException if parsing failed
 */
Expression function(ParseInfo info) :
{
	String funcName = null;
    
	Expression expression = null;
	ArrayList args = new ArrayList(2);
	ArrayList otherArgs = null;
	Token funcToken = null;
	Boolean distinct = null;
	OrderBy orderBy = null;
	Expression condition = null;
}
{
	((	funcToken = <CONVERT>
		<LPAREN>
		expression = expression(info)
		{
			args.add(expression);
		}
		<COMMA>
		expression = dataType()	
		{
			args.add(expression);
		}
		<RPAREN> 
	)
	|
	(			
		funcToken = <CAST>
		<LPAREN>
		expression = expression(info)
		{
			args.add(expression);
		} 
		<AS>
		expression = dataType()
		{
			args.add(expression);
		}
		<RPAREN>				
	)
	|
	LOOKAHEAD(2, {getToken(1).image.equalsIgnoreCase("SUBSTRING")}) (
	   funcName = nonReserved("SUBSTRING")
	   <LPAREN>
	   expression = expression(info)
	   {
	      args.add(expression);
	   }
	   ((<FROM> expression = expression(info)
	   {
	      args.add(expression);
	   }
  	   [<FOR> expression = expression(info)
	    {
	      args.add(expression);
	    }
	   ])|(<COMMA> otherArgs = expressionList(info)) {args.addAll(otherArgs);})
	   <RPAREN>
	)
	|
	LOOKAHEAD(2, {getToken(1).image.equalsIgnoreCase("EXTRACT")}) (
	   nonReserved("EXTRACT")
	   <LPAREN>
	   (funcToken = <YEAR> | 
	    funcToken = <MONTH> |
	    funcToken = <DAY> |
	    funcToken = <HOUR> |
	    funcToken = <MINUTE> |
	    funcToken = <SECOND>)
	   <FROM> expression = expression(info)
	   {
	   	  if (funcToken.image.equalsIgnoreCase("DAY")) {
	         funcName = "DAYOFMONTH";
	      }  	      
	      args.add(expression);
	   }
	   <RPAREN>
	)
	|
	LOOKAHEAD(2, {getToken(1).image.equalsIgnoreCase("TRIM")}) (
	   funcName= nonReserved("TRIM")
	   <LPAREN>
	   { funcToken = null; expression = null;}
	   [
	    LOOKAHEAD(2) (((funcToken = <LEADING>|
	      funcToken = <TRAILING>|
	      funcToken = <BOTH>)
	    [expression = expression(info)])
	    |
	    expression = expression(info))
		<FROM>
	   ]
  	   {
	      if (funcToken == null) {
	      	  args.add(new Constant("BOTH"));
	      } else {
	          args.add(new Constant(funcToken.image));
	      }
	      if (expression == null) {
	          args.add(new Constant(" "));
	      } else {
	          if (expression instanceof Constant) {
	              Object value = ((Constant)expression).getValue();
	              if (value instanceof String && ((String)value).length() != 1) {
				      throw new ParseException(QueryPlugin.Util.gs(QueryPlugin.Event.TEIID30398, "TRIM CHAR", value)); //$NON-NLS-1$
	              }
	          }
	          args.add(expression);
	      }
	   }
	   expression = expression(info)
	   {
	      args.add(expression);
	   }
	   <RPAREN>
	)
	|
	LOOKAHEAD(<ID>, {matchesAny(getToken(1).image, "to_chars", "to_bytes") != null}) (	
		funcName = nonReserved("TO_CHARS", "TO_BYTES")
		<LPAREN>
		expression = expression(info) 
		{		
			args.add(expression);
		}
		<COMMA>
		expression = stringConstant()
		{
			args.add(expression);
		} 
		<RPAREN>				
	)
	|
	LOOKAHEAD(<ID>, {matchesAny(getToken(1).image, "timestampadd", "timestampdiff") != null}) (	
		funcName = nonReserved("TIMESTAMPADD", "TIMESTAMPDIFF")
		<LPAREN>
		expression = intervalType() 
		{		
			args.add(expression);
		}
		<COMMA>
		expression = expression(info)
		{
			args.add(expression);
		} 
		<COMMA>
		expression = expression(info)
		{
			args.add(expression);
		} 
		<RPAREN>				
	)
	|
	LOOKAHEAD(<ID>, {getToken(1).image.equalsIgnoreCase("querystring")}) expression = queryString(info)
	  {
		return expression;
	  }		
	|
	(
		(funcToken = <LEFT> | funcToken = <RIGHT> | funcToken = <CHAR> | funcToken = <USER> 
		                    | funcToken = <YEAR> | funcToken = <MONTH> | funcToken = <HOUR>
		                    | funcToken = <MINUTE> | funcToken = <SECOND> | funcToken = <XMLCONCAT>
		                    | funcToken = <XMLCOMMENT>)
        <LPAREN>
		[args = expressionList(info)]
		<RPAREN>
	)		
	|
	LOOKAHEAD(<TRANSLATE>|<INSERT> <LPAREN>) (
		(funcToken = <TRANSLATE> | funcToken = <INSERT>)
		<LPAREN>
		[args = expressionList(info)]
		<RPAREN>
	)  
	| expression = xmlParse(info)
	  {
	  	return expression;
	  }
	| expression = xmlElement(info)
	  {
	  	return expression;
	  }
	| ( funcToken = <XMLPI>
		<LPAREN>
		(
		 LOOKAHEAD(<ID>, { "name".equalsIgnoreCase(getToken(1).image) }) <ID> expression = idExpression()
		 |
		 expression = idExpression()
		)
		{
			args.add(expression);	
		}
		[
			<COMMA> expression = expression(info)
			{
				args.add(expression);	
			}	
		]
		<RPAREN>
	)
	|	expression = xmlForest(info)
		{
			return expression;
		}
	|	expression = xmlSerialize(info)
		{
			return expression;
		}
	|	expression = xmlQuery(info)
		{
			return expression;
		}
	|   
	(	funcName = id()
		<LPAREN>
		[<ALL> { distinct = false; } | <DISTINCT> {distinct = true;} ]
		[ args = expressionList(info) ]
		[ orderBy = orderby(info) ]
		<RPAREN>
		condition = filterClause(info)
	))		
	{
		if(funcName == null) { 
			funcName = funcToken.image;
		}
		if (distinct != null || orderBy != null || condition != null) {
			AggregateSymbol as = new AggregateSymbol(funcName, distinct!=null?distinct:false, (Expression[])args.toArray(new Expression[args.size()]), orderBy);
			as.setCondition(condition);
			return as;
		}	
		return new Function(funcName, (Expression[])args.toArray(new Expression[args.size()]));
	}
}

Constant stringConstant() :
{
	String val = null;
}
{
	val = stringVal()
	{
		return new Constant(val);
	}
}

XMLParse xmlParse(ParseInfo info) :
{
	Expression expr = null;
	String doc = null;
	boolean wellformed = false;
}
{
	<XMLPARSE><LPAREN>
	doc = nonReserved("DOCUMENT", "CONTENT")
	expr = expression(info)
	[nonReserved("WELLFORMED")
	 {
	   wellformed = true;
	 }
	]
	<RPAREN>
	{
		XMLParse result = new XMLParse();
		result.setDocument("document".equalsIgnoreCase(doc));
		result.setExpression(expr);
		result.setWellFormed(wellformed);
		return result;
	}
}

QueryString queryString(ParseInfo info) :
{
	Expression path = null;
	DerivedColumn arg = null;
	ArrayList<DerivedColumn> args = new ArrayList<DerivedColumn>(2);
}
{
 	nonReserved("QUERYSTRING") <LPAREN>
 	path = expression(info)
	(<COMMA> arg=derivedColumn(info)
	 {
		args.add(arg);
		arg = null;
	 }
	)*
	<RPAREN>  		
	{
		return new QueryString(path, args);
	}
}

XMLElement xmlElement(ParseInfo info) :
{
	String name = null;
	ArrayList content = new ArrayList(2);
	XMLNamespaces xmlNamespaces = null;
	XMLAttributes xmlAttributes = null;
	Expression expression = null;
}
{
	<XMLELEMENT> <LPAREN>
	(
	 LOOKAHEAD(<ID>, { "name".equalsIgnoreCase(getToken(1).image) }) <ID> name = id()
	 |
	 name = id()
	)
	[
		LOOKAHEAD(2) <COMMA> xmlNamespaces = xmlNamespaces(info)
	]
	[
		LOOKAHEAD(2) <COMMA> xmlAttributes = xmlAttributes(info)
	]
	(<COMMA> expression=expression(info)
	{
		content.add(expression);
	}
	)*
	<RPAREN>
	{
		XMLElement result = new XMLElement(name, content);
		result.setNamespaces(xmlNamespaces);
		result.setAttributes(xmlAttributes);
		return result;
	}
}	

XMLAttributes xmlAttributes(ParseInfo info) :
{
	DerivedColumn expression = null;
	ArrayList<DerivedColumn> args = new ArrayList<DerivedColumn>(2);
}
{
 	<XMLATTRIBUTES> <LPAREN>
	expression = derivedColumn(info)
	{
		args.add(expression);
	}
	(<COMMA> expression=derivedColumn(info)
	 {
		args.add(expression);
	 }
	)*
	<RPAREN>  		
	{
		return new XMLAttributes(args);
	}
}

XMLForest xmlForest(ParseInfo info) :
{
	DerivedColumn expression = null;
	XMLNamespaces xmlNamespaces = null;
	ArrayList<DerivedColumn> args = new ArrayList<DerivedColumn>(2);
}
{
 	<XMLFOREST> <LPAREN>
	[
		xmlNamespaces = xmlNamespaces(info) <COMMA>
	]
	expression = derivedColumn(info)
	{
		args.add(expression);
	}
	(<COMMA> expression=derivedColumn(info)
	 {
		args.add(expression);
	 }
	)*
	<RPAREN>  		
	{
		XMLForest result = new XMLForest(args);
		result.setNamespaces(xmlNamespaces);
		return result;
	}
}		
		
XMLNamespaces xmlNamespaces(ParseInfo info) :
{
	ArrayList namespaces = new ArrayList(2);
	XMLNamespaces.NamespaceItem item = null;
}
{
 	<XMLNAMESPACES> <LPAREN>
	item = namespaceItem()
	{
		namespaces.add(item);
	}
	(<COMMA> item = namespaceItem()
	 {
		 namespaces.add(item);
	 }
	)*
	<RPAREN>  		
	{
		return new XMLNamespaces(namespaces);
	}
}

XMLNamespaces.NamespaceItem namespaceItem() :
{
	String uri = null;
	String prefix = null;
}
{
	(
		uri = stringVal() <AS> prefix = id()
		{
			return new XMLNamespaces.NamespaceItem(uri, prefix);
		}
	) | (
		<NO> <DEFAULT_KEYWORD>
		{
			return new XMLNamespaces.NamespaceItem();
		}
	) | (
		<DEFAULT_KEYWORD> uri = stringVal()
		{
			return new XMLNamespaces.NamespaceItem(uri);
		}
	)
}

Constant idExpression() :
{
	String id = null;
}
{
	id = id()
	{
		return new Constant(id);
	}
}

ParsedDataType parseDataType() :
{
	Token typeToken = null;
	Token lengthToken = null;
	Token scaleToken = null; 
	boolean precision = true;
}
{
	(
		(typeToken = <STRING> ([<LPAREN>lengthToken=<INTEGERVAL><RPAREN>]) {precision = false;} ) |
		(typeToken = <VARCHAR> ([<LPAREN>lengthToken=<INTEGERVAL><RPAREN>]) {precision = false;} ) | 
		typeToken = <BOOLEAN> | 
		(typeToken = <BYTE> ([<LPAREN>lengthToken=<INTEGERVAL><RPAREN>]) {precision = false;} ) | 
		(typeToken = <TINYINT> [<LPAREN>lengthToken=<INTEGERVAL><RPAREN>] ) |
		(typeToken = <SHORT> [<LPAREN>lengthToken=<INTEGERVAL><RPAREN>] ) | 
		(typeToken = <SMALLINT> [<LPAREN>lengthToken=<INTEGERVAL><RPAREN>] ) |
		(typeToken = <CHAR> ([<LPAREN>lengthToken=<INTEGERVAL><RPAREN>]) {precision = false;} ) | 
		(typeToken = <INTEGER> [<LPAREN>lengthToken=<INTEGERVAL><RPAREN>] ) | 
		(typeToken = <LONG> [<LPAREN>lengthToken=<INTEGERVAL><RPAREN>] ) | 
		(typeToken = <BIGINT> [<LPAREN>lengthToken=<INTEGERVAL><RPAREN>]) |
		(typeToken = <BIGINTEGER> [<LPAREN>lengthToken=<INTEGERVAL><RPAREN>]) | 
		(typeToken = <FLOAT> [<LPAREN>lengthToken=<INTEGERVAL>[<COMMA>scaleToken=<INTEGERVAL>]<RPAREN>]) |
		(typeToken = <REAL> [<LPAREN>lengthToken=<INTEGERVAL>[<COMMA>scaleToken=<INTEGERVAL>]<RPAREN>])| 
		(typeToken = <DOUBLE> [<LPAREN>lengthToken=<INTEGERVAL>[<COMMA>scaleToken=<INTEGERVAL>]<RPAREN>])| 
		(typeToken = <BIGDECIMAL> [<LPAREN>lengthToken=<INTEGERVAL>[<COMMA>scaleToken=<INTEGERVAL>]<RPAREN>])|
		(typeToken = <DECIMAL> [<LPAREN>lengthToken=<INTEGERVAL>[<COMMA>scaleToken=<INTEGERVAL>]<RPAREN>])| 
		typeToken = <DATE> | 
		typeToken = <TIME> |
		typeToken = <TIMESTAMP> |
		typeToken = <OBJECT> |
		typeToken = <BLOB> |
		typeToken = <CLOB> |
		(typeToken = <VARBINARY> ([<LPAREN>lengthToken=<INTEGERVAL><RPAREN>]) {precision = false;} ) |
		typeToken = <XML>
		
	)
	
	{
		if (scaleToken != null){
			return new ParsedDataType(typeToken.image, Integer.parseInt(lengthToken.image), Integer.parseInt(scaleToken.image), precision);
		}
		else if (scaleToken == null && lengthToken != null){
			return new ParsedDataType(typeToken.image, Integer.parseInt(lengthToken.image), precision);
		}
		return new ParsedDataType(typeToken.image);
	}
}


Constant dataType() : 
{
	ParsedDataType type = null;
}
{
	type = parseDataType()	
	{
		return new Constant(type.type);
	}
}

/**
 * Parse an interval type name - used only in TIMESTAMPADD and TIMESTAMPDIFF functions.
 * @return Interval type parsed into a constant string object
 * @throws ParseException if parsing failed
 */
Constant intervalType() : 
{
	String type = null;
}
{
	(
		type = nonReserved("SQL_TSI_FRAC_SECOND", "SQL_TSI_SECOND", "SQL_TSI_MINUTE", "SQL_TSI_HOUR", "SQL_TSI_DAY", "SQL_TSI_WEEK", "SQL_TSI_MONTH", "SQL_TSI_QUARTER", "SQL_TSI_YEAR")
	)
	{
		return new Constant(type);
	}
}
/**
 * <p>Parse a literal - strings must be wrapped in either '' or "".
 * JDBC escape syntax is parsed for Date, Time and Timestamp value.</p>
 * @return Parsed literal
 * @throws ParseException if parsing failed
 */
Constant literal() :
{
    Token t = null;
    String strVal = null;
    Class escapeType = null;
    Constant constant = null;
}
{
	(	
		strVal=stringVal()	{ 
			constant = new Constant(strVal, DataTypeManager.DefaultDataClasses.STRING);
		} |
		
		t=<INTEGERVAL> 	{ 
			try { 
				// First try as integer - this should nearly always work
				constant = new Constant(Integer.valueOf(t.image), DataTypeManager.DefaultDataClasses.INTEGER); 				
			} catch(NumberFormatException e1) { 
				try { 
					// Second try as a long
					constant = new Constant(Long.valueOf(t.image), DataTypeManager.DefaultDataClasses.LONG);
				} catch(NumberFormatException e2) {
					try {
						// Third try as a biginteger
						constant = new Constant(new BigInteger(t.image), DataTypeManager.DefaultDataClasses.BIG_INTEGER);
					} catch(NumberFormatException e3) {
						Object[] params = new Object[] { t.image };
						throw new ParseException(QueryPlugin.Util.getString("SQLParser.Integer_parse", params)); //$NON-NLS-1$
					}
				}
			}			
		}	|
		
		t=<FLOATVAL>	{ 
			try { 
				constant = new Constant(Double.valueOf(t.image), DataTypeManager.DefaultDataClasses.DOUBLE); 
			} catch(NumberFormatException e) {
				Object[] params = new Object[] { t.image };
				throw new ParseException(QueryPlugin.Util.getString("SQLParser.Float_parse", params)); //$NON-NLS-1$
			}
		}   |
		t=<DECIMALVAL>	{ 
			try { 
			    if (DECIMAL_AS_DOUBLE) {
			    	constant = new Constant(Double.valueOf(t.image), DataTypeManager.DefaultDataClasses.DOUBLE); 
				} else {
			    	constant = new Constant(new java.math.BigDecimal(t.image), DataTypeManager.DefaultDataClasses.BIG_DECIMAL); 
				}
			} catch(NumberFormatException e) {
				Object[] params = new Object[] { t.image };
				throw new ParseException(QueryPlugin.Util.getString("SQLParser.decimal_parse", params)); //$NON-NLS-1$
			}
		}   |
		t=<BINARYSTRINGVAL> { constant = new Constant(new BinaryType(javax.xml.bind.DatatypeConverter.parseHexBinary(t.image.substring(2, t.image.length() - 1))), DataTypeManager.DefaultDataClasses.VARBINARY); } |
		t=<FALSE>    { constant = new Constant(Boolean.FALSE, DataTypeManager.DefaultDataClasses.BOOLEAN); } |
		t=<TRUE>     { constant = new Constant(Boolean.TRUE, DataTypeManager.DefaultDataClasses.BOOLEAN); }  |
        t=<UNKNOWN>  { constant = new Constant(null, DataTypeManager.DefaultDataClasses.BOOLEAN); }       |
        t=<NULL>     { constant = new Constant(null); }          |
        
        ( (<BOOLEANTYPE>   { escapeType=DataTypeManager.DefaultDataClasses.BOOLEAN; } |
          <TIMESTAMPTYPE> { escapeType=DataTypeManager.DefaultDataClasses.TIMESTAMP; } | 
          <DATETYPE>      { escapeType=DataTypeManager.DefaultDataClasses.DATE; } |
          <TIMETYPE>      { escapeType=DataTypeManager.DefaultDataClasses.TIME; }) strVal=stringVal() { 
	        	try {
	        		constant = new Constant(DataTypeManager.transformValue(strVal, escapeType), escapeType);
	        	} catch (TransformationException e) {
	        		throw new ParseException(e.getMessage()); //$NON-NLS-1$
	        	}
	        } <RBRACE> ) 

	)
	{
		return constant;
	}
}



/*   
 * DDL specific parser
 */

 void parseMetadata(MetadataFactory factory) :
{
}
{
    ddlStmts(factory) [<SEMICOLON>] (ddlStmts(factory) [<SEMICOLON>])*     
}

void ddlStmts(MetadataFactory factory) :
{
	Command command = null; 
}
{
	(LOOKAHEAD(3) 	createTable(factory) | 
	 LOOKAHEAD(4)	createDDLProcedure(factory, new ParseInfo()) |
	 LOOKAHEAD(2)	createNameSpace(factory) |
	 LOOKAHEAD(4) 	command=createTrigger(new ParseInfo())
	 {
	 	createDDLTrigger(factory, (AlterTrigger)command);
	 }
	)
}

void createNameSpace(MetadataFactory factory) :
{
	String uri = null;
	String prefix = null;
}
{ 
	<SET> nonReserved ("NAMESPACE") uri = stringVal() <AS> prefix = id()
	{
		factory.addNamespace(prefix, uri);
	}
}

/**
 * Parse create update procedure command
 * @throws ParseException if parsing failed
 */
CreateProcedureCommand createDDLProcedure(MetadataFactory factory, ParseInfo info) :
{
	boolean virtual = true;
	boolean function = false;
	Procedure proc = null;
	String procName = null;
    CreateProcedureCommand procCmd = new CreateProcedureCommand();
    Statement stmt = null; 	
    ParsedDataType returnDataType = null;
    Token comment = null;    
}
{
	<CREATE> [<VIRTUAL> | <FOREIGN> {virtual = false;}] (<PROCEDURE> | <FUNCTION> {function = true;})
	//the below is optional beacuse to allow the designer based metadata
	(	procName = id()
		{
			try {
				proc = factory.addProcedure(procName);
			} catch(TranslatorException e){
				throw new ParseException(e.getMessage());
			}		
		}
	
		<LPAREN>
		[procedureParameter(factory, proc)]
		(<COMMA> procedureParameter(factory, proc))*	
		<RPAREN>
		
		[<RETURNS> (([<TABLE>] <LPAREN>
	        procedureRsColumn(factory, proc)
	        (<COMMA> procedureRsColumn(factory, proc))*
	    <RPAREN>)
	     |
	     returnDataType = parseDataType())
	    ]
	    [ optionsClause(proc, factory)
		   {
		      setProcedureOptions(proc);
		   }
		]
		[<AS> { comment = getToken(1).specialToken; } 
		stmt = statement(info)])
		{
			proc.setVirtual(virtual);
			proc.setFunction(function);
			if (stmt != null){
			    if (function || !virtual) {
			         throw new ParseException(QueryPlugin.Util.getString("SQLParser.function_def", procName));
			    }
				proc.setQueryPlan((comment != null?comment.image+" ":"") + stmt.toString());
			}
			
	        if (returnDataType != null){
				addProcColumn(factory, proc, "return", returnDataType, false);
	        }
	        if (function) {
	        	replaceProcedureWithFunction(factory, proc);
	        }
	        return procCmd; 		
		}
}

void procedureParameter(MetadataFactory factory, Procedure proc) :
{
	String name = null;
	ParsedDataType type = null;
	ProcedureParameter.Type ppType = ProcedureParameter.Type.In;
	ProcedureParameter param = null;
}
{
	[((<IN> {ppType = ProcedureParameter.Type.In ;})
	 |(<OUT> {ppType = ProcedureParameter.Type.Out;})
	 |(<INOUT> {ppType = ProcedureParameter.Type.InOut;}))]
	name = id()
	type = parseDataType()
	[nonReserved("RESULT")
	  {
	    if (ppType != ProcedureParameter.Type.Out) {
	    	throw new ParseException(QueryPlugin.Util.getString("SQLParser.param_out", proc.getName(), name));
	    }
	    ppType = ProcedureParameter.Type.ReturnValue;
	  }
	]
	{
		try {
			param = factory.addProcedureParameter(validateElementName(name), type.type, ppType, proc);
			setTypeInfo(type, param);
		} catch (TranslatorException e){
			throw new ParseException(e.getMessage());
		}
	}
	[optionsClause(param, factory)
	   {
	      setColumnOptions(param);
	   }
	]	
}

void procedureRsColumn(MetadataFactory factory, Procedure proc) :
{
	String name = null;
}
{
	name = id()
	procedureColumn(factory, proc, name, true)
}

void procedureColumn(MetadataFactory factory, Procedure proc, String name, boolean rs) :
{
	ParsedDataType type = null;
	boolean notNull = false;
	BaseColumn column = null; 
}
{
	  type = parseDataType()
	  {
	  	column = addProcColumn(factory, proc, name, type, rs);
	  }
	  [<NOT> <NULL> { notNull = true; }]	  
	  [optionsClause(column, factory)
	   {
	      setColumnOptions(column);
	   }
	  ]
}

void createTable(MetadataFactory factory) :
{
	Table table = null;
	String tableName = null;
	boolean view = false;
	Command query = null;
	Token comment = null;
}
{
	<CREATE> (<FOREIGN> <TABLE> | [<VIRTUAL>] nonReserved("VIEW") {view = true;}) 
	tableName = id()
	{
		try{
		    table = factory.addTable(tableName);
		    table.setVirtual(view);
	    } catch(TranslatorException e){
	    	throw new ParseException(e.getMessage());
	    }
	}
	[<LPAREN>
    createColumn(factory, table)
    (LOOKAHEAD(2) <COMMA>
      createColumn(factory, table)
    )*	
    [<CONSTRAINT> (primaryKeys(factory, table) | constraints(factory, table) | foreignKeys(factory, table))
        (<COMMA>
         (primaryKeys(factory, table) | constraints(factory, table)|foreignKeys(factory, table))
        )*
    ]    
    <RPAREN>]    
    [optionsClause(table, factory)
	   {
	      setTableOptions(table);
	   }
	]
	[<AS> { comment = getToken(1).specialToken; } query = queryExpression(new ParseInfo())]
	{
		if (query != null){
		   if (!view) {
     		   throw new ParseException(QueryPlugin.Util.getString("SQLParser.view_def", tableName));
		   }
		   table.setSelectTransformation((comment != null?comment.image+" ":"") + query.toString());	
		}
		if (!table.supportsUpdate() && table.getColumns() != null) {
			for (Column c : table.getColumns()) {
				c.setUpdatable(false);
			}
		}
	}
}

void foreignKeys(MetadataFactory factory, Table table) :
{
	List<String> columnNames = null;
	String viewName = null;
	Table reference = null;
	KeyRecord pk = null;
	Column column = null;
	List<String> pkColumnNames = null;
	KeyRecord key = null;
}
{
	<FOREIGN> nonReserved("KEY")
	columnNames = getColumnNames()
    {
	    for (String col: columnNames) {
	    	column = getColumn(col, table);
	    }  
    }
    <REFERENCES>
    viewName = id()
    [pkColumnNames = getColumnNames()]
    {
	    try{
		    key = factory.addForiegnKey("FK"+table.getForeignKeys().size(), columnNames, pkColumnNames, viewName, table);   
	    } catch (TranslatorException e){
	    	throw new ParseException(e.getMessage());
	    }
    }
    [optionsClause(key, factory)
	   {
	      setCommonProperties(key, key.getProperties());
	   }
	]
}

void primaryKeys(MetadataFactory factory, Table table) :
{
	List<String> columnNames = null;
	Column column = null;
	KeyRecord key = null;
}
{
	<PRIMARY> nonReserved("KEY")
    {
    	columnNames = getColumnNames();
	    for (String col: columnNames) {
	    	column = getColumn(col, table);
	    }
	    if (table.getPrimaryKey() != null){
	    	throw new ParseException(QueryPlugin.Util.getString("SQLParser.pk_exists", table.getName()));
	 	}
	 	try{
	 		key = factory.addPrimaryKey("PK", columnNames, table);
	 	} catch(TranslatorException e){
	 		throw new ParseException(e.getMessage());
	 	}
    }
    [optionsClause(key, factory)
	   {
	      setCommonProperties(key, key.getProperties());
	   }
	]    
}

void constraints(MetadataFactory factory, Table table) :
{
	KeyRecord keyrecord = null;
	Column column = null;
	List<String> columnNames = null;
	String type = null;
	KeyRecord key = null;
}
{
	( <UNIQUE> { type = "UNIQUE"; } | type = nonReserved("INDEX","ACCESSPATTERN"))
    {
	    columnNames = getColumnNames();	    
	    for (String col: columnNames) {
	    	column = getColumn(col, table);
	    }
	    try{
	    	if (type.equalsIgnoreCase("INDEX")) { 
	    		key = factory.addIndex("INDEX"+table.getIndexes().size(), true, columnNames, table);
	    	}
	    	if (type.equalsIgnoreCase("UNIQUE")) { 
	    		key = factory.addIndex("UNIQUE"+table.getUniqueKeys().size(), false, columnNames, table);
	    	}	    
	    	if (type.equalsIgnoreCase("ACCESSPATTERN")) { 
	    		key = factory.addAccessPattern("AP"+table.getAccessPatterns().size(), columnNames, table);
	    	}
    	}catch(TranslatorException e){
    		throw new ParseException(e.getMessage());
    	}	    
    }
    [optionsClause(key, factory)
	   {
	      setCommonProperties(key, key.getProperties());
	   }
	]    
}

ArrayList<String> getColumnNames() :
{
	ArrayList list = new ArrayList<String>();
	String id = null;
}
{
	<LPAREN>
	  id = id()
	  {
	  	list.add(id);
	  }
	  (<COMMA> id = id()
	   {
		list.add(id);
	   }
	  )*
	 <RPAREN> 
	 {
	 	return list;
	 }
}

void createColumn(MetadataFactory factory, Table table) :
{
	String element = null;
	ParsedDataType type = null;
	boolean autoIncrement = false;
	boolean notNull = false;
	String defalt = null;
	Column column = null;
	List<String> columnName = new ArrayList<String>();
	boolean index = false;
	boolean unique = false;
	boolean pk = false;
	String word = null;
}
{
	 element = id()
	 (
	  type = parseDataType()
	  {
	  	try{
    		column = factory.addColumn(validateElementName(element), type.type, table);
    		column.setUpdatable(true);
		    setTypeInfo(type, column);		    	
    		columnName.add(element);
    	}catch(TranslatorException e){
    		throw new ParseException(e.getMessage());
    	}
	  }
	 )
	 [<NOT> <NULL> { notNull = true; }]
	 ([(<UNIQUE> { unique = true;  })
	  |(word=nonReserved("INDEX", "AUTO_INCREMENT")  
	    { if (word.equalsIgnoreCase("INDEX")) index = true;
	      else if (word.equalsIgnoreCase("AUTO_INCREMENT")) autoIncrement = true; 
	    })+	 
	  |(<PRIMARY> nonReserved("KEY") { pk = true; })	 
	  ])
	 [<DEFAULT_KEYWORD> defalt = stringVal()]
	 [optionsClause(column, factory)
	   {
	      setColumnOptions(column);
	   }
	 ]
	 {
	 	try{
		    if (index){
		 		factory.addIndex(element, true, columnName, table);
		 	}
		 	
		    if (unique){
		 		factory.addIndex(element, false, columnName, table);
		 	}	 	
		 	
		    if (pk) {
		    	if (table.getPrimaryKey() != null) {
		    		throw new ParseException(QueryPlugin.Util.getString("SQLParser.pk_exists", table.getName()));
		    	}
		 		factory.addPrimaryKey(element, columnName, table);
		 	}
    	}catch(TranslatorException e){
    		throw new ParseException(e.getMessage());
    	}	 	
	     	 	
	    column.setAutoIncremented(autoIncrement);
	    column.setNullType(notNull?Column.NullType.No_Nulls:Column.NullType.Nullable);
	    if (defalt != null){
	    	column.setDefaultValue(defalt);
	    }	    
	 }
}

void optionsClause(AbstractMetadataRecord record, MetadataFactory factory) :
{
}
{
  <OPTIONS> <LPAREN>
  optionPair(record, factory) (<COMMA> optionPair(record, factory))*	   
  <RPAREN> 
}

void optionPair(AbstractMetadataRecord record, MetadataFactory factory) :
{
	String value = null;
	String key = null;
	Token t = null;
}
{
	 key = id()
	 (value = stringVal() 
 	 |
 	 t = <INTEGERVAL>
 	 |
 	 t = <DECIMALVAL>
 	 |
 	 t = <TRUE>
 	 |
 	 t = <FALSE>)
	 { 
	 	if (t != null) {
	 		value = t.image;
	 	}
	 	key = resolvePropertyKey(factory, key);
	 	record.setProperty(key, value); 
	 } 
}
